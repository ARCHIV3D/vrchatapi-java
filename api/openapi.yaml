openapi: 3.0.0
info:
  contact:
    email: me@ruby.js.org
    name: Unofficial VRChat API Documentation Project
    url: https://github.com/VRChatAPI
  description: |-
    ![VRChat API Banner](https://vrchatapi.github.io/assets/img/api_banner_1500x400.png)

    # Welcome to the VRChat API

    Before we begin, we would like to state this is a **COMMUNITY DRIVEN PROJECT**.
    This means that everything you read on here was written by the community itself and is **not** officially supported by VRChat.
    The documentation is provided "AS IS", and any action you take towards VRChat is completely your own responsibility.

    The documentation and additional libraries SHALL ONLY be used for applications interacting with VRChat's API in accordance
    with their [Terms of Service](https://github.com/VRChatAPI), and MUST NOT be used for modifying the client, "avatar ripping", or other illegal activities.
    Malicious usage or spamming the API may result in account termination.
    Certain parts of the API are also more sensitive than others, for example moderation, so please read tread extra carefully and read the warnings when present.

    ![Tupper Policy on API](https://i.imgur.com/yLlW7Ok.png)

    Finally, use of the API using applications other than the approved methods (website, VRChat application, Unity SDK) is not officially supported.
    VRChat provides no guarantee or support for external applications using the API. Access to API endpoints may break **at any time, without notice**.
    Therefore, please **do not ping** VRChat Staff in the VRChat Discord if you are having API problems, as they do not provide API support.
    We will make a best effort in keeping this documentation and associated language libraries up to date, but things might be outdated or missing.
    If you find that something is no longer valid, please contact us on Discord or [create an issue](https://github.com/vrchatapi/specification/issues) and tell us so we can fix it.

    # Getting Started

    The VRChat API can be used to programmatically retrieve or update information regarding your profile, friends, avatars, worlds and more.
    The API consists of two parts, "Photon" which is only used in-game, and the "Web API" which is used by both the game and the website.
    This documentation focuses only on the Web API.

    The API is designed around the REST ideology, providing semi-simple and usually predictable URIs to access and modify objects.
    Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes.
    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.

    <div class="callout callout-error">
      <strong>üõë Warning! Do not touch Photon!</strong><br>
      Photon is only used by the in-game client and should <b>not</b> be touched. Doing so may result in permanent account termination.
    </div>

    <div class="callout callout-info">
      <strong>‚ÑπÔ∏è API Key and Authentication</strong><br>
      The API Key has always been the same and is currently <code>JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26</code>.
      Read <a href="#tag--authentication">Authentication</a> for how to log in.
    </div>

    # Using the API

    For simply exploring what the API can do it is strongly recommended to download [Insomnia](https://insomnia.rest/download), a free and open-source
    API client that's great for sending requests to the API in an orderly fashion.
    Insomnia allows you to send data in the format that's required for VRChat's API.
    It is also possible to try out the API in your browser, by first logging in at [vrchat.com/home](https://vrchat.com/home/) and then going to
    [vrchat.com/api/1/auth/user](https://vrchat.com/api/1/auth/user), but the information will be much harder to work with.

    For more permanent operation such as software development it is instead recommended to use one of the existing language SDKs.
    This community project maintains API libraries in several languages, which allows you to interact with the API with simple function calls
    rather than having to implement the HTTP protocol yourself. Most of these libraries are automatically generated from the API specification,
    sometimes with additional helpful wrapper code to make usage easier. This allows them to be almost automatically updated and expanded upon
    as soon as a new feature is introduced in the specification itself. The libraries can be found on [GitHub](https://github.com/vrchatapi) or following:

    * [NodeJS (JavaScript)](https://www.npmjs.com/package/vrchat)
    * [Dart](https://pub.dev/packages/vrchat_dart)
    * [Rust](https://crates.io/crates/vrchatapi)
    * [C#](github.com/vrchatapi/vrchatapi-csharp)
    * [Python](https://github.com/vrchatapi/VRChatPython)

    # Pagination

    Most endpoints enforce pagination, meaning they will only return 10 entries by default, and never more than 100.<br>
    Using both the limit and offset parameters allows you to easily paginate through a large number of objects.

    | Query Parameter | Type | Description |
    | ----------|--|------- |
    | `limit` | integer  | The number of objects to return. This value often defaults to 10. Highest limit is always 100.|
    | `offset` | integer  | A zero-based offset from the default object sorting.|

    If a request returns fewer objects than the `limit` parameter, there are no more items available to return.

    # Contribution

    Do you want to get involved in the documentation effort? Do you want to help improve one of the language API libraries?
    This project is an [OPEN Open Source Project](https://openopensource.org)! This means that individuals making significant and valuable contributions are given
    commit-access to the project. It also means we are very open and welcoming of new people making contributions, unlike some more guarded open-source projects.

    [![Discord](https://img.shields.io/static/v1?label=vrchatapi&message=discord&color=blueviolet&style=for-the-badge)](https://discord.gg/qjZE9C9fkB)
  license:
    name: The MIT License (MIT)
    url: https://github.com/vrchatapi/specification/blob/master/LICENSE
  termsOfService: https://vrchat.com/legal/
  title: VRChat API Documentation
  version: 1.0.1
servers:
- url: https://api.vrchat.cloud/api/1
tags:
- name: authentication
- name: avatars
- name: favorites
- name: files
- name: friends
- name: notifications
- name: playermoderation
- name: system
- name: users
- name: worlds
paths:
  /auth:
    get:
      description: Verify whether the currently provided Auth Token is valid.
      operationId: verifyAuthToken
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Verify Auth Token
      tags:
      - authentication
      x-accepts: application/json
  /logout:
    put:
      description: Invalidates the auth cookie.
      operationId: logout
      responses:
        "200":
          content:
            application/json:
              examples:
                Logout Success:
                  value:
                    success:
                      message: Ok!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
      - authCookie: []
      summary: Logout
      tags:
      - authentication
      x-accepts: application/json
  /auth/user:
    get:
      description: |-
        Login and/or Get user data from your VRChat account.

        If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.

        **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
      operationId: getCurrentUser
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: OK
          headers:
            Set-Cookie:
              description: Authenticating returns an `auth` cookie.
              explode: false
              schema:
                example: auth=authcookie_00000000-0000-0000-0000-000000000000; Expires=Tue,
                  01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - authHeader: []
      - authHeader: []
        twoFactorAuthCookie: []
      - authCookie: []
      summary: Login and/or Get Current User Info
      tags:
      - authentication
      x-accepts: application/json
  /auth/twofactorauth/totp/verify:
    post:
      description: Finishes the login sequence with a normal 2FA-generated code for
        accounts with 2FA-protection enabled.
      operationId: verify2FA
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            examples: {}
            schema:
              properties:
                code:
                  type: string
              required:
              - code
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
          headers:
            Set-Cookie:
              description: Provides a `twoFactorAuth` cookie, which can be used to
                bypasses the 2FA requirement for future logins on the same device.
              explode: false
              schema:
                example: twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
                  Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - authCookie: []
      summary: Verify 2FA code
      tags:
      - authentication
      x-contentType: application/json
      x-accepts: application/json
  /auth/twofactorauth/otp/verify:
    post:
      description: Finishes the login sequence with an OTP (One Time Password) recovery
        code for accounts with 2FA-protection enabled.
      operationId: verifyRecoveryCode
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            examples: {}
            schema:
              properties:
                code:
                  type: string
              required:
              - code
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
          headers:
            Set-Cookie:
              description: Provides a `twoFactorAuth` cookie, which can be used to
                bypasses the 2FA requirement for future logins on the same device.
              explode: false
              schema:
                example: twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
                  Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - authCookie: []
      summary: Verify 2FA code with Recovery code
      tags:
      - authentication
      x-contentType: application/json
      x-accepts: application/json
  /user/{userId}/delete:
    put:
      description: |-
        Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.

        **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.

        **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
      operationId: deleteUserById
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete User
      tags:
      - authentication
      x-accepts: application/json
  /users:
    get:
      description: Search and list any users by text query
      operationId: searchUsers
      parameters:
      - description: Searches by `displayName`. Will return empty array if search
          query is empty or missing.
        explode: true
        in: query
        name: search
        required: false
        schema:
          minLength: 0
          type: string
        style: form
      - description: Active user by developer type, none for normal users and internal
          for moderators
        explode: true
        in: query
        name: developerType
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedUser'
                type: array
          description: OK
        "400":
          content:
            application/json:
              examples:
                "400 N is too low":
                  value:
                    error:
                      message: n must be a positive integerÀ∏ '-1'
                      status_code: 400
                "400 N is too high":
                  value:
                    error:
                      message: nÔºù1000 is much too high‚Ä§ implement paging you savages‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to search list of users with an
            invalid request.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Search All Users
      tags:
      - users
      x-accepts: application/json
  /users/{username}/name:
    get:
      description: Get public user information about a specific user using their name.
      operationId: getUserByName
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get User by Username
      tags:
      - users
      x-accepts: application/json
  /users/{userId}:
    get:
      description: Get public user information about a specific user using their ID.
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get User by ID
      tags:
      - users
      x-accepts: application/json
    put:
      description: Update a users information such as the email and birthday.
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                birthday:
                  format: date
                  type: string
                acceptedTOSVersion:
                  type: number
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
                status:
                  $ref: '#/components/schemas/UserStatus'
                statusDescription:
                  type: string
                bio:
                  minLength: 0
                  type: string
                bioLinks:
                  items:
                    type: string
                  type: array
                userIcon:
                  description: MUST be a valid VRChat /file/ url.
                  example: https://api.vrchat.cloud/api/1/file/file_76dc2964-0ce8-41df-b2e7-8edf994fee31/1
                  minLength: 0
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: OK
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Update User Info
      tags:
      - users
      x-contentType: application/json
      x-accepts: application/json
  /users/active:
    get:
      deprecated: true
      description: |-
        Search and list any Active users by text query.

        **Has been locked down and now always respond with "Invalid Admin Credentials".**
      operationId: searchActiveUsers
      parameters:
      - description: Username to search for
        explode: true
        in: query
        name: search
        required: true
        schema:
          type: string
        style: form
      - description: Active user by developer type, none for normal users and internal
          for moderators
        explode: true
        in: query
        name: developerType
        required: false
        schema:
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedUser'
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                Invalid Admin Credentials Example:
                  value:
                    error:
                      message: '"Invalid Admin Credentials"'
                      status_code: 403
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing Administrator credentials.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Search Active Users
      tags:
      - users
      x-accepts: application/json
  /health:
    get:
      description: Gets the overall health status, the server name, and the current
        build version tag of the API.
      operationId: getHealth
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  value:
                    ok: true
                    serverName: prod-api-green-marsh-dgt
                    buildVersionTag: master-build-2021-06-24-fred-drakeshoot
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: API's Health
      security: []
      summary: Check API Health
      tags:
      - system
      x-accepts: application/json
  /config:
    get:
      description: |-
        API config contains configuration that the clients needs to work properly.

        Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
      operationId: getConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: OK
          headers:
            Set-Cookie:
              explode: false
              schema:
                example: apiKey=JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26; Path=/
                type: string
              style: simple
      security: []
      summary: Fetch API Config
      tags:
      - system
      x-accepts: application/json
  /visits:
    get:
      description: |-
        Returns in plain format the number of currently online users.

        **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
      operationId: getCurrentOnlineUsers
      responses:
        "200":
          content:
            text/plain:
              schema:
                description: Number of online users
                example: 12345
                minimum: 0
                readOnly: true
                type: integer
          description: OK
      security: []
      summary: Current Online Users
      tags:
      - system
      x-accepts: text/plain
  /time:
    get:
      description: |-
        Returns in plain format the current time of the API server.

        **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
      operationId: getSystemTime
      responses:
        "200":
          content:
            text/plain:
              schema:
                description: Does not return millisecond precision. Always returns
                  time in UTC.
                example: 2021-08-20T12:38:42Z
                format: date-time
                type: string
          description: OK
      security: []
      summary: Current System Time
      tags:
      - system
      x-accepts: text/plain
  /auth/user/friends:
    get:
      description: List information about friends.
      operationId: getFriends
      parameters:
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Returns *only* offline users if true, returns only online and
          active users if false
        explode: true
        in: query
        name: offline
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedUser'
                type: array
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Friends
      tags:
      - friends
      x-accepts: application/json
  /user/{userId}/friendStatus:
    get:
      description: Retrieve if the user is currently a friend with a given user, if
        they have an outgoing friend request, and if they have an incoming friend
        request. The proper way to receive and accept friend request is by checking
        if the user has an incoming `Notification` of type `friendRequest`, and then
        accepting that notification.
      operationId: getFriendStatus
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  value:
                    isFriend: false
                    outgoingRequest: false
                    incomingRequest: false
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Friend Status
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Check Friend Status
      tags:
      - friends
      x-accepts: application/json
  /user/{userId}/friendRequest:
    delete:
      description: Deletes an outgoing pending friend request to another user. To
        delete an incoming friend request, use the `deleteNotification` endpoint instead.
      operationId: deleteFriendRequest
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Deleted Friend Request:
                  value:
                    success:
                      message: Friendship request deleted
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after cancelling a friend request.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Delete Friend Request":
                  value:
                    error:
                      message: that friend request could not be found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete a non-existent friend-request.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete Friend Request
      tags:
      - friends
      x-accepts: application/json
    post:
      description: Send a friend request to another user.
      operationId: friend
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    senderUsername: tupper
                    type: friendRequest
                    message: ""
                    details: '{}'
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 User Doesn't Exist Response":
                  value:
                    error:
                      message: user doesn't exist«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to send a friend request to a user
            which doesn't exist.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Send Friend Request
      tags:
      - friends
      x-accepts: application/json
  /auth/user/friends/{userId}:
    delete:
      description: Unfriend a user by ID.
      operationId: unfriend
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Unfriend Success:
                  value:
                    success:
                      message: Friendship destroyed
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after unfriending a user.
        "400":
          content:
            application/json:
              examples:
                "400 Not Friends Response":
                  value:
                    error:
                      message: These users are not friends
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to unfriend someone who is not a
            friend.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Unfriend
      tags:
      - friends
      x-accepts: application/json
  /auth/user/notifications:
    get:
      description: Retrieve all of the current user's notifications.
      operationId: getNotifications
      parameters:
      - description: Only send notifications of this type (can use `all` for all).
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: all
          type: string
        style: form
      - deprecated: true
        description: Return notifications sent by the user. Must be false or omitted.
        explode: true
        in: query
        name: sent
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to return hidden or non-hidden notifications. True only
          allowed on type `friendRequest`.
        explode: true
        in: query
        name: hidden
        required: false
        schema:
          type: boolean
        style: form
      - description: Only return notifications sent after this Date. Ignored if type
          is `friendRequest`.
        explode: true
        in: query
        name: after
        required: false
        schema:
          example: five_minutes_ago
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
          description: Returns a list of Notifcation objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Notifications
      tags:
      - notifications
      x-accepts: application/json
  /auth/user/notifications/{notificationId}/see:
    put:
      description: Mark a notification as seen.
      operationId: markNotificationAsRead
      parameters:
      - explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    senderUsername: tupper
                    type: friendRequest
                    message: ""
                    details: '{}'
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Mark As Read
      tags:
      - notifications
      x-accepts: application/json
  /auth/user/notifications/{notificationId}/hide:
    put:
      description: Delete a notification.
      operationId: deleteNotification
      parameters:
      - explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    senderUsername: tupper
                    type: friendRequest
                    message: ""
                    details: '{}'
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete Notification
      tags:
      - notifications
      x-accepts: application/json
  /auth/user/notifications/{notificationId}/accept:
    put:
      description: Accept a friend request by notification `frq_` ID. Friend requests
        can be found using the NotificationsAPI `getNotifications` by filtering of
        type `friendRequest`.
      operationId: acceptFriendRequest
      parameters:
      - explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Unfriend Success:
                  value:
                    success:
                      message: Ok
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after friending a user.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Accept Friend Request":
                  value:
                    error:
                      message: that friend request could not be found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to accept a non-existent friend
            request.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Accept Friend Request
      tags:
      - notifications
      x-accepts: application/json
  /auth/user/notifications/clear:
    put:
      description: Clear **all** notifications.
      operationId: clearNotifications
      responses:
        "200":
          content:
            application/json:
              examples:
                Unfriend Success:
                  value:
                    success:
                      message: Ok
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after clearing all notifications.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Clear All Notifications
      tags:
      - notifications
      x-accepts: application/json
  /files:
    get:
      description: Returns a list of files
      operationId: getFiles
      parameters:
      - description: Tag, for example "icon" or "gallery", not included by default.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          minLength: 1
          type: string
        style: form
      - deprecated: true
        description: UserID, will always generate a 500 permission error.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/File'
                type: array
          description: Returns a list of File objects.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Files
      tags:
      - files
      x-accepts: application/json
  /file:
    post:
      description: Creates a new File object
      operationId: createFile
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                name:
                  minLength: 0
                  type: string
                mimeType:
                  $ref: '#/components/schemas/MIMEType'
                extension:
                  minLength: 1
                  type: string
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
              required:
              - extension
              - mimeType
              - name
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Create File
      tags:
      - files
      x-contentType: application/json
      x-accepts: application/json
  /file/{fileId}:
    delete:
      description: Deletes a File object.
      operationId: deleteFile
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                File Deleted Success:
                  value:
                    success:
                      message: File deleted
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after deleting a File.
        "404":
          content:
            application/json:
              examples:
                File Deleted Error:
                  value:
                    error:
                      message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete a non-existent file.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete File
      tags:
      - files
      x-accepts: application/json
    get:
      description: Shows general information about the "File" object. Each File can
        have several "Version"'s, and each Version can have multiple real files or
        "Data" blobs.
      operationId: getFile
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
        "404":
          content:
            application/json:
              examples:
                "404 File Not Found":
                  value:
                    error:
                      message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            file.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Show File
      tags:
      - files
      x-accepts: application/json
    post:
      description: Creates a new FileVersion. Once a Version has been created, proceed
        to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
      operationId: createFileVersion
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                signatureMd5:
                  minLength: 1
                  type: string
                signatureSizeInBytes:
                  type: number
                fileMd5:
                  minLength: 1
                  type: string
                fileSizeInBytes:
                  type: number
              required:
              - signatureMd5
              - signatureSizeInBytes
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Create File Version
      tags:
      - files
      x-contentType: application/json
      x-accepts: application/json
  /file/{fileId}/{versionId}:
    delete:
      description: Delete a specific version of a file. You can only delete the latest
        version.
      operationId: deleteFileVersion
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      - explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
        "400":
          content:
            application/json:
              examples:
                "400 Delete Initial File Version":
                  value:
                    error:
                      message: Cannot delete the initial version of the file‚Äö just
                        delete the entire file record‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete the initial version of
            a file. Delete the main File object instead.
        "500":
          content:
            application/json:
              examples:
                "409/500 Delete Non-Last File Version":
                  value:
                    error:
                      message: 409 Cannot delete against anything but the latest version
                        of this fileÀ∏ 1‚Äö 11
                      status_code: 500
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete any version of a file
            that is not hte last one.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete File Version
      tags:
      - files
      x-accepts: application/json
    get:
      description: |-
        Downloads the file with the provided version number.

        **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.

        **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
      operationId: downloadFileVersion
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      - explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          description: Raw file
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Download File Version
      tags:
      - files
      x-accepts: application/json
  /file/{fileId}/{versionId}/{fileType}/status:
    get:
      description: Retrieves the upload status for file upload. Can currently only
        be accessed when `status` is `waiting`. Trying to access it on a file version
        already uploaded currently times out.
      operationId: getFileDataUploadStatus
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      - explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - explode: false
        in: path
        name: fileType
        required: true
        schema:
          enum:
          - file
          - signature
          - delta
          example: file
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Access Key:
                  value:
                    uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
                    fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                    nextPartNumber: 0
                    maxParts: 1000
                    parts: []
                    etags: []
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Current FileVersion upload status. Contains the uploadId needed
            for uploading, as well as the already uploaded parts.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Check FileData Upload Status
      tags:
      - files
      x-accepts: application/json
  /file/{fileId}/{versionId}/{fileType}/start:
    put:
      description: |-
        Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS's REST documentation on "PUT Object to S3" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.

        **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
      operationId: startFileDataUpload
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      - explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - explode: false
        in: path
        name: fileType
        required: true
        schema:
          enum:
          - file
          - signature
          - delta
          example: file
          type: string
        style: simple
      - explode: true
        in: query
        name: partNumber
        required: true
        schema:
          example: 1
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  value:
                    url: https://s3.amazonaws.com/files.vrchat.cloud/Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage?AWSAccessKeyId=XXXXXXXXXXXXXXXXXXXX&Expires=1626028518&Signature=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&partNumber=1&uploadId=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS
            REST docs - PUT Object)
        "400":
          content:
            application/json:
              examples:
                Tried To Upload Against Already Finished Version:
                  value:
                    error:
                      message: Cannot upload against a complete version entry‚Ä§ Create
                        a new version of this file before uploading‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to start an upload against a FileVersion
            that is already marked as  `complete`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Start FileData Upload
      tags:
      - files
      x-accepts: application/json
  /file/{fileId}/{versionId}/{fileType}/finish:
    put:
      description: Finish an upload of a FileData. This will mark it as "complete".
        After uploading the `file` for Avatars and Worlds you then have to upload
        a `signature` file.
      operationId: finishFileDataUpload
      parameters:
      - explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          type: string
        style: simple
      - explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - explode: false
        in: path
        name: fileType
        required: true
        schema:
          enum:
          - file
          - signature
          - delta
          example: file
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            examples:
              Example Request:
                value:
                  etags:
                  - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                  - yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  nextPartNumber: "0"
                  maxParts: "0"
            schema:
              properties:
                etags:
                  description: Array of ETags uploaded.
                  items:
                    type: string
                  minItems: 1
                  type: array
                  uniqueItems: true
                nextPartNumber:
                  default: "0"
                  deprecated: true
                  description: Always a zero in string form, despite how many parts
                    uploaded.
                  example: "0"
                  maxLength: 1
                  minLength: 1
                  pattern: "0"
                  type: string
                maxParts:
                  default: "0"
                  deprecated: true
                  description: Always a zero in string form, despite how many parts
                    uploaded.
                  example: "0"
                  maxLength: 1
                  minLength: 1
                  pattern: "0"
                  type: string
              required:
              - maxParts
              - nextPartNumber
              type: object
        description: |-
          Please see documentation on ETag's:
          [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)

          ETag's should NOT be present when uploading a `signature`.
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Finish FileData Upload
      tags:
      - files
      x-contentType: application/json
      x-accepts: application/json
  /worlds:
    get:
      description: Search and list any worlds by query filters.
      operationId: searchWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          default: popularity
          description: How to sort
          enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
          example: popularity
          title: SortOptions
          type: string
        style: form
      - description: Set to `me` for searching own worlds.
        explode: true
        in: query
        name: user
        required: false
        schema:
          enum:
          - me
          type: string
        style: form
      - description: Filter by author UserID
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          default: descending
          description: Result ordering
          enum:
          - ascending
          - descending
          example: descending
          title: OrderOptions
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          default: hidden
          enum:
          - public
          - private
          - hidden
          example: hidden
          type: string
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Search All Worlds
      tags:
      - worlds
      x-accepts: application/json
    post:
      description: Create a new world. This endpoint requires `assetUrl` to be a valid
        File object with `.vrcw` file extension, and `imageUrl` to be a valid File
        object with an image file extension.
      operationId: createWorld
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                assetUrl:
                  minLength: 1
                  type: string
                assetVersion:
                  minLength: 1
                  type: string
                authorId:
                  example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  readOnly: true
                  title: UserID
                  type: string
                authorName:
                  minLength: 1
                  type: string
                capacity:
                  default: 16
                  example: 16
                  maximum: 40
                  minimum: 1
                  type: integer
                description:
                  type: string
                id:
                  example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
                  pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
                  title: WorldID
                  type: string
                imageUrl:
                  minLength: 1
                  type: string
                name:
                  minLength: 1
                  type: string
                platform:
                  $ref: '#/components/schemas/Platform'
                releaseStatus:
                  $ref: '#/components/schemas/ReleaseStatus'
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
                unityPackageUrl:
                  minLength: 1
                  type: string
                unityVersion:
                  default: 5.3.4p1
                  example: 2018.4.20f1
                  minLength: 1
                  type: string
              required:
              - assetUrl
              - imageUrl
              - name
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: Returns a single World object.
        "400":
          content:
            application/json:
              examples:
                "400 Can't Create World Yet":
                  value:
                    error:
                      message: \"You can't create a world right now\"
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying create a world without having the
            neccesary Trust rank yet.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      summary: Create World
      tags:
      - worlds
      x-contentType: application/json
      x-accepts: application/json
  /worlds/active:
    get:
      description: Search and list currently Active worlds by query filters.
      operationId: getActiveWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          default: popularity
          description: How to sort
          enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
          example: popularity
          title: SortOptions
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          default: descending
          description: Result ordering
          enum:
          - ascending
          - descending
          example: descending
          title: OrderOptions
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          default: hidden
          enum:
          - public
          - private
          - hidden
          example: hidden
          type: string
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Active Worlds
      tags:
      - worlds
      x-accepts: application/json
  /worlds/recent:
    get:
      description: Search and list recently visited worlds by query filters.
      operationId: getRecentWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          default: popularity
          description: How to sort
          enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
          example: popularity
          title: SortOptions
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          default: descending
          description: Result ordering
          enum:
          - ascending
          - descending
          example: descending
          title: OrderOptions
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          default: hidden
          enum:
          - public
          - private
          - hidden
          example: hidden
          type: string
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      - description: Target user to see information on, admin-only.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Only See Own Recents":
                  value:
                    error:
                      message: \"You can only see your own recent worlds!\"
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to accept a see recently visited
            worlds of another user without sufficient admin permissions.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Recent Worlds
      tags:
      - worlds
      x-accepts: application/json
  /worlds/favorites:
    get:
      description: Search and list favorited worlds by query filters.
      operationId: getFavoritedWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          default: popularity
          description: How to sort
          enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
          example: popularity
          title: SortOptions
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          default: descending
          description: Result ordering
          enum:
          - ascending
          - descending
          example: descending
          title: OrderOptions
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          default: hidden
          enum:
          - public
          - private
          - hidden
          example: hidden
          type: string
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      - description: Target user to see information on, admin-only.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "403":
          content:
            application/json:
              examples:
                "404 Cant See Other Users Favorites":
                  value:
                    error:
                      message: 403 You can't see another user's favorites
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to see favourites of another user
            without sufficient admin permissions.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Favorited Worlds
      tags:
      - worlds
      x-accepts: application/json
  /worlds/{worldId}:
    delete:
      description: Delete a world. Notice a world is never fully "deleted", only its
        ReleaseStatus is set to "hidden" and the linked Files are deleted. The WorldID
        is permanently reserved.
      operationId: deleteWorld
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete World
      tags:
      - worlds
      x-accepts: application/json
    get:
      description: Get information about a specific World.
      operationId: getWorld
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: Returns a single World object.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      summary: Get World by ID
      tags:
      - worlds
      x-accepts: application/json
    put:
      description: Update information about a specific World.
      operationId: updateWorld
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                assetUrl:
                  minLength: 1
                  type: string
                assetVersion:
                  minLength: 1
                  type: string
                authorId:
                  example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  readOnly: true
                  title: UserID
                  type: string
                authorName:
                  minLength: 1
                  type: string
                capacity:
                  default: 16
                  example: 16
                  maximum: 40
                  minimum: 1
                  type: integer
                description:
                  type: string
                id:
                  example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
                  pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
                  title: WorldID
                  type: string
                imageUrl:
                  minLength: 1
                  type: string
                name:
                  minLength: 1
                  type: string
                platform:
                  $ref: '#/components/schemas/Platform'
                releaseStatus:
                  $ref: '#/components/schemas/ReleaseStatus'
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
                unityPackageUrl:
                  minLength: 1
                  type: string
                unityVersion:
                  default: 5.3.4p1
                  example: 2018.4.20f1
                  minLength: 1
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: Returns a single World object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Update World
      tags:
      - worlds
      x-contentType: application/json
      x-accepts: application/json
  /worlds/{worldId}/{instanceId}:
    get:
      description: Returns a worlds instance.
      operationId: getWorldInstance
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns a single Instance object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get World Instance
      tags:
      - worlds
      x-accepts: application/json
  /worlds/{worldId}/metadata:
    get:
      deprecated: true
      description: Return a worlds custom metadata. This is currently believed to
        be unused. Metadata can be set with `updateWorld` and can be any arbitrary
        object.
      operationId: getWorldMetadata
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: OK
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get World Metadata
      tags:
      - worlds
      x-accepts: application/json
  /worlds/{worldId}/publish:
    delete:
      description: Unpublish a world.
      operationId: unpublishWorld
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Unpublish World
      tags:
      - worlds
      x-accepts: application/json
    get:
      description: Returns a worlds publish status.
      operationId: getWorldPublishStatus
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get World Publish Status
      tags:
      - worlds
      x-accepts: application/json
    put:
      description: Publish a world. You can only publish one world per week.
      operationId: publishWorld
      parameters:
      - explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: TODO
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Publish World
      tags:
      - worlds
      x-accepts: application/json
  /favorites:
    get:
      description: Returns a list of favorites.
      operationId: getFavorites
      parameters:
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The type of favorites to return, FavoriteType.
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Favorite'
                type: array
          description: Returns a list of Favorite objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Favorites
      tags:
      - favorites
      x-accepts: application/json
    post:
      description: |-
        Add a new favorite.

        Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatar4` and `worlds1` to `worlds4`.

        You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
      operationId: addFavorite
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          application/json:
            examples:
              Example Favorite Friend:
                value:
                  type: friend
                  favoriteId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  tags:
                  - group_0
              Example Favorite Avatar:
                value:
                  type: avatar
                  favoriteId: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
                  tags:
                  - avatars1
            schema:
              properties:
                type:
                  $ref: '#/components/schemas/FavoriteType'
                favoriteId:
                  description: Must be either AvatarID, WorldID or UserID.
                  type: string
                tags:
                  description: Tags indicate which group this favorite belongs to.
                    Adding multiple groups makes it show up in all. Removing it from
                    one in that case removes it from all.
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
              required:
              - favoriteId
              - tags
              - type
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
          description: Returns a single Favorite object.
        "400":
          content:
            application/json:
              examples:
                "400 Already Favorited That Friend":
                  value:
                    error:
                      message: You already have that friend favorited
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying favorite someone or something when
            already having it/them favorited.
        "403":
          content:
            application/json:
              examples:
                "403 Favorite Add Not Friends Error":
                  value:
                    error:
                      message: you are not friends with that user«É
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying favorite someone whom you are not
            friends with.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Add Favorite
      tags:
      - favorites
      x-contentType: application/json
      x-accepts: application/json
  /favorites/{favoriteId}:
    delete:
      description: Remove a favorite from your favorites list.
      operationId: removeFavorite
      parameters:
      - explode: false
        in: path
        name: favoriteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Favorite Removed":
                  value:
                    success:
                      message: favorite deleted!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Error'
          description: Success response after removing a favorite.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Favorite not found":
                  value:
                    error:
                      message: 404 couldn't find that favorite
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            favorite.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Remove Favorite
      tags:
      - favorites
      x-accepts: application/json
    get:
      description: Return information about a specific Favorite.
      operationId: getFavorite
      parameters:
      - explode: false
        in: path
        name: favoriteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
          description: Returns a single Favorite object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Favorite not found":
                  value:
                    error:
                      message: 404 couldn't find that favorite
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            favorite.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Show Favorite
      tags:
      - favorites
      x-accepts: application/json
  /favorite/groups:
    get:
      description: Return a list of favorite groups owned by a user. Returns the same
        information as `getFavoriteGroups`.
      operationId: getFavoriteGroups
      parameters:
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The owner of whoms favorite groups to return. Must be a UserID.
        explode: true
        in: query
        name: ownerId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FavoriteGroup'
                type: array
          description: Returns a list of FavoriteGroup objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Favorite Groups
      tags:
      - favorites
      x-accepts: application/json
  /favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}:
    delete:
      description: Clear ALL contents of a specific favorite group.
      operationId: clearFavoriteGroup
      parameters:
      - description: The type of group to fetch, must be a valid FavoriteType.
        explode: false
        in: path
        name: favoriteGroupType
        required: true
        schema:
          enum:
          - world
          - friend
          - avatar
          type: string
        style: simple
      - explode: false
        in: path
        name: favoriteGroupName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Favorite Group Cleared":
                  value:
                    success:
                      message: favorite deleted!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Error'
          description: Success response after clearing a favorite group.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Clear Favorite Group
      tags:
      - favorites
      x-accepts: application/json
    get:
      description: Fetch information about a specific favorite group.
      operationId: getFavoriteGroup
      parameters:
      - description: The type of group to fetch, must be a valid FavoriteType.
        explode: false
        in: path
        name: favoriteGroupType
        required: true
        schema:
          enum:
          - world
          - friend
          - avatar
          type: string
        style: simple
      - explode: false
        in: path
        name: favoriteGroupName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteGroup'
          description: Returns a single FavoriteGroup object.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Show Favorite Group
      tags:
      - favorites
      x-accepts: application/json
    put:
      description: Update information about a specific favorite group.
      operationId: updateFavoriteGroup
      parameters:
      - description: The type of group to fetch, must be a valid FavoriteType.
        explode: false
        in: path
        name: favoriteGroupType
        required: true
        schema:
          enum:
          - world
          - friend
          - avatar
          type: string
        style: simple
      - explode: false
        in: path
        name: favoriteGroupName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_9'
        content:
          application/json:
            schema:
              properties:
                displayName:
                  type: string
                visibility:
                  $ref: '#/components/schemas/FavoriteGroupVisibility'
                tags:
                  description: Tags on FavoriteGroups are believed to do nothing.
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
              type: object
      responses:
        "200":
          description: OK
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Update Favorite Group
      tags:
      - favorites
      x-contentType: application/json
      x-accepts: application/json
  /avatars/favorites:
    get:
      description: Search and list favorited avatars by query filters.
      operationId: getFavoritedAvatars
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          default: popularity
          description: How to sort
          enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
          example: popularity
          title: SortOptions
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          default: descending
          description: Result ordering
          enum:
          - ascending
          - descending
          example: descending
          title: OrderOptions
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          default: hidden
          enum:
          - public
          - private
          - hidden
          example: hidden
          type: string
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      - description: Target user to see information on, admin-only.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: List Favorited Avatars
      tags:
      - avatars
      x-accepts: application/json
  /avatars:
    get:
      description: Search and list avatars by query filters. You can only search your
        own or featured avatars. It is not possible as a normal user to search other
        peoples avatars.
      operationId: searchAvatars
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          default: popularity
          description: How to sort
          enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
          example: popularity
          title: SortOptions
          type: string
        style: form
      - description: Set to `me` for searching own avatars.
        explode: true
        in: query
        name: user
        required: false
        schema:
          enum:
          - me
          type: string
        style: form
      - description: Filter by author UserID
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          default: descending
          description: Result ordering
          enum:
          - ascending
          - descending
          example: descending
          title: OrderOptions
          type: string
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Tags to include (comma-separated).
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          default: hidden
          enum:
          - public
          - private
          - hidden
          example: hidden
          type: string
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Avatar'
                type: array
          description: Returns a list of Avatar objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Search Avatars
      tags:
      - avatars
      x-accepts: application/json
    post:
      description: Create an avatar. It's possible to optionally specify a ID if you
        want a custom one. Attempting to create an Avatar with an already claimed
        ID will result in a DB error.
      operationId: createAvatar
      requestBody:
        $ref: '#/components/requestBodies/inline_object_10'
        content:
          application/json:
            schema:
              properties:
                assetUrl:
                  type: string
                id:
                  example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
                  pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
                  title: AvatarID
                  type: string
                name:
                  minLength: 1
                  type: string
                description:
                  minLength: 1
                  type: string
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
                imageUrl:
                  minLength: 1
                  type: string
                releaseStatus:
                  $ref: '#/components/schemas/ReleaseStatus'
                version:
                  default: 1
                  minimum: 0
                  type: number
                unityPackageUrl:
                  type: string
              required:
              - imageUrl
              - name
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                "401 Cannot Set Featured":
                  value:
                    error:
                      message: cannot set featured tag if you are not an admin
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when set featured to true without being an admin.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Create Avatar
      tags:
      - avatars
      x-contentType: application/json
      x-accepts: application/json
  /avatars/{avatarId}:
    delete:
      description: Delete an avatar. Notice an avatar is never fully "deleted", only
        its ReleaseStatus is set to "hidden" and the linked Files are deleted. The
        AvatarID is permanently reserved.
      operationId: deleteAvatar
      parameters:
      - explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete Avatar
      tags:
      - avatars
      x-accepts: application/json
    get:
      description: Get information about a specific Avatar.
      operationId: getAvatar
      parameters:
      - explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get Avatar
      tags:
      - avatars
      x-accepts: application/json
    put:
      description: Update information about a specific avatar.
      operationId: updateAvatar
      parameters:
      - explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_11'
        content:
          application/json:
            schema:
              properties:
                assetUrl:
                  type: string
                id:
                  example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
                  pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
                  title: AvatarID
                  type: string
                name:
                  minLength: 1
                  type: string
                description:
                  minLength: 1
                  type: string
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
                imageUrl:
                  minLength: 1
                  type: string
                releaseStatus:
                  $ref: '#/components/schemas/ReleaseStatus'
                version:
                  default: 1
                  minimum: 0
                  type: number
                unityPackageUrl:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Update Avatar
      tags:
      - avatars
      x-contentType: application/json
      x-accepts: application/json
  /avatars/{avatarId}/select:
    put:
      description: Switches into that avatar.
      operationId: selectAvatar
      parameters:
      - explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: Returns a single CurrentUser object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Select Avatar
      tags:
      - avatars
      x-accepts: application/json
  /auth/user/playermoderations:
    delete:
      description: ‚ö†Ô∏è **This will delete every single player moderation you've ever
        made.**
      operationId: clearAllPlayerModerations
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 OK":
                  value:
                    success:
                      message: OK
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Error'
          description: Success response after e.g. clearing all player moderations.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Clear All Player Moderations
      tags:
      - playermoderation
      x-accepts: application/json
    get:
      description: |-
        Returns a list of all player moderations made by **you**.

        This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
      operationId: getPlayerModerations
      parameters:
      - description: Must be one of PlayerModerationType, except unblock. Unblocking
          simply removes a block.
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Must be valid UserID.
        explode: true
        in: query
        name: targetUserId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlayerModeration'
                type: array
          description: Returns a list of PlayerModeration objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Search Player Moderations
      tags:
      - playermoderation
      x-accepts: application/json
    post:
      description: Moderate a user, e.g. unmute them or show their avatar.
      operationId: moderateUser
      requestBody:
        $ref: '#/components/requestBodies/inline_object_12'
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                moderated:
                  example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  readOnly: true
                  title: UserID
                  type: string
                type:
                  $ref: '#/components/schemas/PlayerModerationType'
              required:
              - moderated
              - type
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerModeration'
          description: Returns a single PlayerModeration object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Moderate User
      tags:
      - playermoderation
      x-contentType: application/json
      x-accepts: application/json
  /auth/user/unplayermoderate:
    put:
      description: Removes a player moderation previously added through `moderateUser`.
        E.g if you previuosly have shown their avatar, but now want to reset it to
        default.
      operationId: unmoderateUser
      requestBody:
        $ref: '#/components/requestBodies/inline_object_13'
        content:
          application/json:
            schema:
              properties:
                moderated:
                  example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  readOnly: true
                  title: UserID
                  type: string
                type:
                  $ref: '#/components/schemas/PlayerModerationType'
              required:
              - type
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Specific User Unmoderated":
                  value:
                    success:
                      message: User usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469 unmoderated
                      status_code: 200
                "200 All Of PlayerModerationType Unmoderated":
                  value:
                    success:
                      message: PlayerModerations of type undefined removed
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Error'
          description: Success response after unmoderating a player moderation.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Unmoderate User
      tags:
      - playermoderation
      x-contentType: application/json
      x-accepts: application/json
  /auth/user/playermoderations/{playerModerationId}:
    delete:
      description: Deletes a specific player moderation based on it's `pmod_` ID.
        The website uses `unmoderateUser` instead. You can delete the same player
        moderation multiple times successfully.
      operationId: deletePlayerModeration
      parameters:
      - explode: false
        in: path
        name: playerModerationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Player Moderation Removed":
                  value:
                    success:
                      message: PlayerModeration pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
                        removed
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Error'
          description: Success response after removing a PlayerModeration by ID.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Can't delete Player Moderation You Didn't Create":
                  value:
                    error:
                      message: You definitely can't delete a playerModeration you
                        didn't create
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete someone else's player
            moderation.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Delete Player Moderation
      tags:
      - playermoderation
      x-accepts: application/json
    get:
      description: Returns a single Player Moderation. This returns the exact same
        amount of information as the more generalised `getPlayerModerations`.
      operationId: getPlayerModeration
      parameters:
      - explode: false
        in: path
        name: playerModerationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerModeration'
          description: Returns a single PlayerModeration object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/inline_response_401'
          description: Error response due to missing apiKey or auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Player Moderation Not Found":
                  value:
                    error:
                      message: Can't find playerModeration«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            player moderation.
      security:
      - apiKeyCookie: []
        authCookie: []
      summary: Get Player Moderation
      tags:
      - playermoderation
      x-accepts: application/json
components:
  examples: {}
  parameters:
    number:
      description: The number of objects to return.
      explode: true
      in: query
      name: "n"
      required: false
      schema:
        default: 60
        maximum: 100
        minimum: 1
        type: integer
      style: form
    offset:
      description: A zero-based offset from the default object sorting from where
        search results start.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    sortOptions:
      explode: true
      in: query
      name: sort
      required: false
      schema:
        default: popularity
        description: How to sort
        enum:
        - popularity
        - heat
        - trust
        - shuffle
        - random
        - favorites
        - reportScore
        - reportCount
        - publicationDate
        - labsPublicationDate
        - created
        - _created_at
        - updated
        - _updated_at
        - order
        - relevance
        - magic
        - name
        example: popularity
        title: SortOptions
        type: string
      style: form
    orderOptions:
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: descending
        description: Result ordering
        enum:
        - ascending
        - descending
        example: descending
        title: OrderOptions
        type: string
      style: form
    releaseStatus:
      description: Filter by ReleaseStatus.
      explode: true
      in: query
      name: releaseStatus
      required: false
      schema:
        default: hidden
        enum:
        - public
        - private
        - hidden
        example: hidden
        type: string
      style: form
    offline:
      description: Returns *only* offline users if true, returns only online and active
        users if false
      explode: true
      in: query
      name: offline
      required: false
      schema:
        type: boolean
      style: form
    fileId:
      explode: false
      in: path
      name: fileId
      required: true
      schema:
        example: file_00000000-0000-0000-0000-000000000000
        pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
        type: string
      style: simple
    versionId:
      explode: false
      in: path
      name: versionId
      required: true
      schema:
        example: 1
        minimum: 1
        type: integer
      style: simple
    fileType:
      explode: false
      in: path
      name: fileType
      required: true
      schema:
        enum:
        - file
        - signature
        - delta
        example: file
        type: string
      style: simple
    userId:
      explode: false
      in: path
      name: userId
      required: true
      schema:
        type: string
      style: simple
    maxUnityVersion:
      description: The maximum Unity version supported by the asset.
      explode: true
      in: query
      name: maxUnityVersion
      required: false
      schema:
        type: string
      style: form
    minUnityVersion:
      description: The minimum Unity version supported by the asset.
      explode: true
      in: query
      name: minUnityVersion
      required: false
      schema:
        type: string
      style: form
    platform:
      description: The platform the asset supports.
      explode: true
      in: query
      name: platform
      required: false
      schema:
        type: string
      style: form
    tag:
      description: Tags to include (comma-separated).
      explode: true
      in: query
      name: tag
      required: false
      schema:
        type: string
      style: form
    notag:
      description: Tags to exclude (comma-separated).
      explode: true
      in: query
      name: notag
      required: false
      schema:
        type: string
      style: form
    search:
      description: Filters by world name.
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
    userIdQuery:
      description: Filter by author UserID
      explode: true
      in: query
      name: userId
      required: false
      schema:
        type: string
      style: form
    featured:
      description: Filters on featured results.
      explode: true
      in: query
      name: featured
      required: false
      schema:
        type: string
      style: form
    userIdAdmin:
      description: Target user to see information on, admin-only.
      explode: true
      in: query
      name: userId
      required: false
      schema:
        type: string
      style: form
    worldId:
      explode: false
      in: path
      name: worldId
      required: true
      schema:
        type: string
      style: simple
    instanceId:
      explode: false
      in: path
      name: instanceId
      required: true
      schema:
        type: string
      style: simple
    favoriteId:
      explode: false
      in: path
      name: favoriteId
      required: true
      schema:
        type: string
      style: simple
    favoriteGroupType:
      description: The type of group to fetch, must be a valid FavoriteType.
      explode: false
      in: path
      name: favoriteGroupType
      required: true
      schema:
        enum:
        - world
        - friend
        - avatar
        type: string
      style: simple
    favoriteGroupName:
      explode: false
      in: path
      name: favoriteGroupName
      required: true
      schema:
        type: string
      style: simple
    avatarId:
      explode: false
      in: path
      name: avatarId
      required: true
      schema:
        type: string
      style: simple
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
    inline_object_9:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
    inline_object_10:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_10'
    inline_object_8:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
    inline_object_12:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_12'
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
    inline_object_11:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_11'
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
    inline_object_13:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_13'
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
  responses:
    MissingCredentials:
      content:
        application/json:
          examples:
            Missing Credentials Example:
              value:
                error:
                  message: '"Missing Credentials"'
                  status_code: 401
          schema:
            $ref: '#/components/schemas/inline_response_401'
      description: Error response due to missing apiKey or auth cookie.
    InvalidAdminCredentials:
      content:
        application/json:
          examples:
            Invalid Admin Credentials Example:
              value:
                error:
                  message: '"Invalid Admin Credentials"'
                  status_code: 403
          schema:
            $ref: '#/components/schemas/inline_response_401'
      description: Error response due to missing Administrator credentials.
    APIHealth:
      content:
        application/json:
          examples:
            Example Response:
              value:
                ok: true
                serverName: prod-api-green-marsh-dgt
                buildVersionTag: master-build-2021-06-24-fred-drakeshoot
          schema:
            $ref: '#/components/schemas/inline_response_200_2'
      description: API's Health
    AcceptFriendRequestError:
      content:
        application/json:
          examples:
            "404 Accept Friend Request":
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to accept a non-existent friend request.
    DeleteFriendRequestError:
      content:
        application/json:
          examples:
            "404 Delete Friend Request":
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete a non-existent friend-request.
    NotFriendsError:
      content:
        application/json:
          examples:
            "400 Not Friends Response":
              value:
                error:
                  message: These users are not friends
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to unfriend someone who is not a friend.
    UserDoesntExistError:
      content:
        application/json:
          examples:
            "404 User Doesn't Exist Response":
              value:
                error:
                  message: user doesn't exist«É
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to send a friend request to a user which
        doesn't exist.
    ClearNotificationsSuccess:
      content:
        application/json:
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after clearing all notifications.
    FriendSuccess:
      content:
        application/json:
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after friending a user.
    UnfriendSuccess:
      content:
        application/json:
          examples:
            Unfriend Success:
              value:
                success:
                  message: Friendship destroyed
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after unfriending a user.
    DeleteFriendRequestSuccess:
      content:
        application/json:
          examples:
            Deleted Friend Request:
              value:
                success:
                  message: Friendship request deleted
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after cancelling a friend request.
    Notification:
      content:
        application/json:
          examples:
            Example Friend Request Response:
              value:
                id: frq_00000000-0000-0000-0000-000000000000
                senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                senderUsername: tupper
                type: friendRequest
                message: ""
                details: '{}'
                seen: false
                created_at: 2021-01-01T00:00:00.000Z
          schema:
            $ref: '#/components/schemas/Notification'
      description: Returns a single Notifcation object.
    FriendStatus:
      content:
        application/json:
          examples:
            Example Response:
              value:
                isFriend: false
                outgoingRequest: false
                incomingRequest: false
          schema:
            $ref: '#/components/schemas/inline_response_200_3'
      description: Friend Status
    NotificationList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Notification'
            type: array
      description: Returns a list of Notifcation objects.
    FileList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/File'
            type: array
      description: Returns a list of File objects.
    File:
      content:
        application/json:
          examples:
            Example Avatar File:
              value:
                id: file_00000000-0000-0000-0000-000000000000
                name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                mimeType: application/gzip
                extension: .unitypackage
                tags: []
                versions:
                - version: 0
                  status: complete
                  created_at: 2019-08-15T11:04:37.910Z
                - version: 1
                  status: complete
                  created_at: 2019-08-15T11:04:49.702Z
                  file:
                    fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                    url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                    md5: xxxxxxxxxxxxxxxxxxx==
                    sizeInBytes: 303055180
                    status: complete
                    category: multipart
                    uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                  delta:
                    fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                    url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                    md5: ""
                    sizeInBytes: 0
                    status: none
                    category: queued
                    uploadId: ""
                  signature:
                    fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                    url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                    md5: xxxxxxxxxxxxxxxx==
                    sizeInBytes: 532748
                    status: complete
                    category: simple
                    uploadId: ""
          schema:
            $ref: '#/components/schemas/File'
      description: Returns a single File object.
    FileDeletedSuccess:
      content:
        application/json:
          examples:
            File Deleted Success:
              value:
                success:
                  message: File deleted
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after deleting a File.
    FileDeletedError:
      content:
        application/json:
          examples:
            File Deleted Error:
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete a non-existent file.
    FileNotFoundError:
      content:
        application/json:
          examples:
            "404 File Not Found":
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        file.
    FileVersionDeleteInitialError:
      content:
        application/json:
          examples:
            "400 Delete Initial File Version":
              value:
                error:
                  message: Cannot delete the initial version of the file‚Äö just delete
                    the entire file record‚Ä§
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete the initial version of a file.
        Delete the main File object instead.
    FileVersionDeleteMiddleError:
      content:
        application/json:
          examples:
            "409/500 Delete Non-Last File Version":
              value:
                error:
                  message: 409 Cannot delete against anything but the latest version
                    of this fileÀ∏ 1‚Äö 11
                  status_code: 500
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete any version of a file that
        is not hte last one.
    RawFile:
      description: Raw file
    FileVersionUploadInfo:
      content:
        application/json:
          examples:
            Example Access Key:
              value:
                uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
                fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                nextPartNumber: 0
                maxParts: 1000
                parts: []
                etags: []
          schema:
            $ref: '#/components/schemas/inline_response_200_4'
      description: Current FileVersion upload status. Contains the uploadId needed
        for uploading, as well as the already uploaded parts.
    LimitedWorldList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/LimitedWorld'
            type: array
      description: Returns a list of LimitedWorld objects.
    World:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/World'
      description: Returns a single World object.
    Instance:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Instance'
      description: Returns a single Instance object.
    Favorite:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Favorite'
      description: Returns a single Favorite object.
    FavoriteList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Favorite'
            type: array
      description: Returns a list of Favorite objects.
    FavoriteGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FavoriteGroup'
      description: Returns a single FavoriteGroup object.
    FavoriteGroupList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/FavoriteGroup'
            type: array
      description: Returns a list of FavoriteGroup objects.
    AvatarList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Avatar'
            type: array
      description: Returns a list of Avatar objects.
    Avatar:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Avatar'
      description: Returns a single Avatar object.
    CurrentUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentUser'
      description: Returns a single CurrentUser object.
    PlayerModerationList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PlayerModeration'
            type: array
      description: Returns a list of PlayerModeration objects.
    PlayerModeration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlayerModeration'
      description: Returns a single PlayerModeration object.
    Users400Error:
      content:
        application/json:
          examples:
            "400 N is too low":
              value:
                error:
                  message: n must be a positive integerÀ∏ '-1'
                  status_code: 400
            "400 N is too high":
              value:
                error:
                  message: nÔºù1000 is much too high‚Ä§ implement paging you savages‚Ä§
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to search list of users with an invalid
        request.
    CreateWorldNotAllowedYetError:
      content:
        application/json:
          examples:
            "400 Can't Create World Yet":
              value:
                error:
                  message: \"You can't create a world right now\"
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying create a world without having the neccesary
        Trust rank yet.
    SeeOtherUserRecentsError:
      content:
        application/json:
          examples:
            "403 Only See Own Recents":
              value:
                error:
                  message: \"You can only see your own recent worlds!\"
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to accept a see recently visited worlds
        of another user without sufficient admin permissions.
    SeeOtherUserFavoritesError:
      content:
        application/json:
          examples:
            "404 Cant See Other Users Favorites":
              value:
                error:
                  message: 403 You can't see another user's favorites
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to see favourites of another user without
        sufficient admin permissions.
    WorldNotFoundError:
      content:
        application/json:
          examples:
            "404 World Not Found":
              value:
                error:
                  message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        world. Sometimes returns with `model <worldId> not found` instead of `World
        <worldId not found`.
    FavoriteAddAlreadyFavoritedError:
      content:
        application/json:
          examples:
            "400 Already Favorited That Friend":
              value:
                error:
                  message: You already have that friend favorited
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying favorite someone or something when already
        having it/them favorited.
    FavoriteAddNotFriendsError:
      content:
        application/json:
          examples:
            "403 Favorite Add Not Friends Error":
              value:
                error:
                  message: you are not friends with that user«É
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying favorite someone whom you are not friends
        with.
    FavoriteNotFoundError:
      content:
        application/json:
          examples:
            "404 Favorite not found":
              value:
                error:
                  message: 404 couldn't find that favorite
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        favorite.
    FavoriteRemovedSuccess:
      content:
        application/json:
          examples:
            "200 Favorite Removed":
              value:
                success:
                  message: favorite deleted!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Error'
      description: Success response after removing a favorite.
    FavoriteGroupClearedSuccess:
      content:
        application/json:
          examples:
            "200 Favorite Group Cleared":
              value:
                success:
                  message: favorite deleted!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Error'
      description: Success response after clearing a favorite group.
    FeaturedSetNotAdminError:
      content:
        application/json:
          examples:
            "401 Cannot Set Featured":
              value:
                error:
                  message: cannot set featured tag if you are not an admin
                  status_code: 401
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when set featured to true without being an admin.
    AvatarNotFoundError:
      content:
        application/json:
          examples:
            "404 Can't find avatar":
              value:
                error:
                  message: Can't find avatar!
                  status_code: 404
            "404 Couldn't find that avatar":
              value:
                error:
                  message: We couldn't find that avatar!
                  status_code: 404
            "404 Avatar Not Found":
              value:
                error:
                  message: Avatar Not Found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        avatar.
    OkSuccess:
      content:
        application/json:
          examples:
            "200 OK":
              value:
                success:
                  message: OK
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Error'
      description: Success response after e.g. clearing all player moderations.
    PlayerModerationUnmoderatedSuccess:
      content:
        application/json:
          examples:
            "200 Specific User Unmoderated":
              value:
                success:
                  message: User usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469 unmoderated
                  status_code: 200
            "200 All Of PlayerModerationType Unmoderated":
              value:
                success:
                  message: PlayerModerations of type undefined removed
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Error'
      description: Success response after unmoderating a player moderation.
    PlayerModerationNotFoundError:
      content:
        application/json:
          examples:
            "404 Player Moderation Not Found":
              value:
                error:
                  message: Can't find playerModeration«É
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        player moderation.
    PlayerModerationRemovedSuccess:
      content:
        application/json:
          examples:
            "200 Player Moderation Removed":
              value:
                success:
                  message: PlayerModeration pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
                    removed
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Error'
      description: Success response after removing a PlayerModeration by ID.
    PlayerModerationDeleteOthersError:
      content:
        application/json:
          examples:
            "403 Can't delete Player Moderation You Didn't Create":
              value:
                error:
                  message: You definitely can't delete a playerModeration you didn't
                    create
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete someone else's player moderation.
  schemas:
    Response:
      example:
        status_code: 0.8008281904610115
        message: message
      properties:
        message:
          minLength: 1
          type: string
        status_code:
          type: number
      required:
      - message
      - status_code
      title: Response
      type: object
    Error:
      example:
        error:
          status_code: 0.8008281904610115
          message: message
      properties:
        error:
          $ref: '#/components/schemas/Response'
      title: Error
      type: object
    Success:
      example:
        success:
          status_code: 0.8008281904610115
          message: message
      properties:
        success:
          $ref: '#/components/schemas/Response'
      title: Success
      type: object
    UserID:
      example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
      readOnly: true
      title: UserID
      type: string
    AvatarID:
      example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
      pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
      title: AvatarID
      type: string
    WorldID:
      example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
      pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
      title: WorldID
      type: string
    UserState:
      default: offline
      description: |-
        * "online" User is online in VRChat
        * "active" User is online, but not in VRChat
        * "offline" User is offline

        Always offline when returned through `getCurrentUser` (/auth/user).
      enum:
      - offline
      - active
      - online
      title: UserState
      type: string
    Tag:
      description: |-
        Tags are a way to grant various access, assign restrictions or other kinds of metadata to various to objects such as worlds, users and avatars.

        System tags starting with `system_` are granted automatically by the system, while admin tags with `admin_` are granted manually. More prefixes such as `language_ ` (to indicate that a player can speak the tagged language), and `author_tag_` (provided by a world author for search and sorting) exist as well.
      minLength: 1
      title: Tag
      type: string
    DeveloperType:
      default: none
      description: |-
        "none" User is a normal user
        "trusted" Unknown
        "internal" Is a VRChat Developer
        "moderator" Is a VRChat Moderator

        Staff can hide their developerType at will.
      enum:
      - none
      - trusted
      - internal
      - moderator
      title: DeveloperType
      type: string
    Platform:
      enum:
      - standalonewindows
      - android
      title: Platform
      type: string
    UserStatus:
      description: Defines the User's current status, for example "ask me", "join
        me" or "offline. This status is a combined indicator of their online activity
        and privacy preference.
      enum:
      - active
      - join me
      - ask me
      - busy
      - offline
      title: UserStatus
      type: string
    CurrentUser:
      example:
        activeFriends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        offlineFriends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        currentAvatarImageUrl: currentAvatarImageUrl
        displayName: displayName
        bio: bio
        acceptedTOSVersion: 0.8008281904610115
        hasLoggedInFromClient: true
        steamId: steamId
        hasEmail: true
        currentAvatarAssetUrl: currentAvatarAssetUrl
        twoFactorAuthEnabled: true
        unsubscribe: true
        steamDetails: '{}'
        pastDisplayNames:
        - pastDisplayNames
        - pastDisplayNames
        isFriend: false
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        date_joined: 2000-01-23
        statusFirstTime: true
        currentAvatarThumbnailImageUrl: currentAvatarThumbnailImageUrl
        currentAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        hasPendingEmail: true
        hasBirthday: true
        last_login: 2000-01-23T04:56:07.000+00:00
        allowAvatarCopying: true
        friends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        tags:
        - null
        - null
        friendKey: friendKey
        emailVerified: true
        statusDescription: statusDescription
        statusHistory:
        - statusHistory
        - statusHistory
        onlineFriends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        friendGroupNames:
        - friendGroupNames
        - friendGroupNames
        homeLocation: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        obfuscatedPendingEmail: obfuscatedPendingEmail
        fallbackAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        accountDeletionDate: 2000-01-23
        bioLinks:
        - bioLinks
        - bioLinks
        profilePicOverride: profilePicOverride
        obfuscatedEmail: obfuscatedEmail
        userIcon: userIcon
        username: username
        oculusId: oculusId
      properties:
        id:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        username:
          type: string
        displayName:
          type: string
        userIcon:
          type: string
        bio:
          type: string
        bioLinks:
          items:
            type: string
          type: array
        profilePicOverride:
          type: string
        statusDescription:
          type: string
        pastDisplayNames:
          items:
            type: string
          type: array
        hasEmail:
          type: boolean
        hasPendingEmail:
          type: boolean
        obfuscatedEmail:
          type: string
        obfuscatedPendingEmail:
          type: string
        emailVerified:
          type: boolean
        hasBirthday:
          type: boolean
        unsubscribe:
          type: boolean
        statusHistory:
          items:
            type: string
          type: array
        statusFirstTime:
          type: boolean
        friends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        friendGroupNames:
          deprecated: true
          description: Always empty array.
          items:
            type: string
          type: array
        currentAvatarImageUrl:
          type: string
        currentAvatarThumbnailImageUrl:
          type: string
        fallbackAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        currentAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        currentAvatarAssetUrl:
          type: string
        accountDeletionDate:
          format: date
          nullable: true
          type: string
        acceptedTOSVersion:
          type: number
        steamId:
          type: string
        steamDetails:
          type: object
        oculusId:
          type: string
        hasLoggedInFromClient:
          type: boolean
        homeLocation:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        twoFactorAuthEnabled:
          type: boolean
        state:
          $ref: '#/components/schemas/UserState'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        last_login:
          format: date-time
          type: string
        last_platform:
          $ref: '#/components/schemas/Platform'
        allowAvatarCopying:
          type: boolean
        status:
          $ref: '#/components/schemas/UserStatus'
        date_joined:
          format: date
          readOnly: true
          type: string
        isFriend:
          default: false
          type: boolean
        friendKey:
          type: string
        onlineFriends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        activeFriends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        offlineFriends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
      required:
      - acceptedTOSVersion
      - allowAvatarCopying
      - bio
      - bioLinks
      - currentAvatar
      - currentAvatarAssetUrl
      - currentAvatarImageUrl
      - currentAvatarThumbnailImageUrl
      - date_joined
      - developerType
      - displayName
      - emailVerified
      - fallbackAvatar
      - friendGroupNames
      - friendKey
      - friends
      - hasBirthday
      - hasEmail
      - hasLoggedInFromClient
      - hasPendingEmail
      - homeLocation
      - id
      - isFriend
      - last_login
      - last_platform
      - obfuscatedEmail
      - obfuscatedPendingEmail
      - oculusId
      - pastDisplayNames
      - profilePicOverride
      - state
      - status
      - statusDescription
      - statusFirstTime
      - statusHistory
      - steamDetails
      - steamId
      - tags
      - twoFactorAuthEnabled
      - unsubscribe
      - userIcon
      - username
      title: CurrentUser
      type: object
    LimitedUser:
      example:
        currentAvatarThumbnailImageUrl: currentAvatarThumbnailImageUrl
        currentAvatarImageUrl: currentAvatarImageUrl
        displayName: displayName
        bio: bio
        tags:
        - null
        - null
        statusDescription: statusDescription
        fallbackAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        profilePicOverride: profilePicOverride
        isFriend: true
        location: location
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        userIcon: userIcon
        username: username
      properties:
        id:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        username:
          type: string
        displayName:
          type: string
        bio:
          type: string
        userIcon:
          type: string
        profilePicOverride:
          type: string
        statusDescription:
          type: string
        currentAvatarImageUrl:
          type: string
        currentAvatarThumbnailImageUrl:
          type: string
        fallbackAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        last_platform:
          $ref: '#/components/schemas/Platform'
        status:
          $ref: '#/components/schemas/UserStatus'
        isFriend:
          type: boolean
        location:
          type: string
        tags:
          description: <- Always empty.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - currentAvatarImageUrl
      - currentAvatarThumbnailImageUrl
      - developerType
      - displayName
      - fallbackAvatar
      - id
      - isFriend
      - last_platform
      - location
      - profilePicOverride
      - status
      - statusDescription
      - tags
      - userIcon
      - username
      title: LimitedUser
      type: object
    User:
      example:
        currentAvatarThumbnailImageUrl: currentAvatarThumbnailImageUrl
        currentAvatarImageUrl: currentAvatarImageUrl
        worldId: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        displayName: displayName
        last_login: last_login
        allowAvatarCopying: true
        bio: bio
        tags:
        - null
        - null
        friendKey: friendKey
        statusDescription: statusDescription
        instanceId: instanceId
        fallbackAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        bioLinks:
        - bioLinks
        - bioLinks
        profilePicOverride: profilePicOverride
        isFriend: true
        location: location
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        date_joined: 2000-01-23
        userIcon: userIcon
        username: username
      properties:
        id:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        username:
          type: string
        displayName:
          type: string
        userIcon:
          type: string
        bio:
          type: string
        bioLinks:
          items:
            type: string
          type: array
        profilePicOverride:
          type: string
        statusDescription:
          type: string
        currentAvatarImageUrl:
          type: string
        currentAvatarThumbnailImageUrl:
          type: string
        fallbackAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        state:
          $ref: '#/components/schemas/UserState'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        last_login:
          type: string
        last_platform:
          $ref: '#/components/schemas/Platform'
        allowAvatarCopying:
          type: boolean
        status:
          $ref: '#/components/schemas/UserStatus'
        date_joined:
          format: date
          readOnly: true
          type: string
        isFriend:
          type: boolean
        friendKey:
          type: string
        worldId:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        instanceId:
          type: string
        location:
          type: string
      required:
      - allowAvatarCopying
      - bio
      - bioLinks
      - currentAvatarImageUrl
      - currentAvatarThumbnailImageUrl
      - date_joined
      - developerType
      - displayName
      - fallbackAvatar
      - friendKey
      - id
      - instanceId
      - isFriend
      - last_login
      - last_platform
      - location
      - profilePicOverride
      - state
      - status
      - statusDescription
      - tags
      - userIcon
      - username
      - worldId
      title: User
      type: object
    DeploymentGroup:
      description: |-
        Used to identify which API deployment cluster is currently responding.

        `blue` and `green` are used by Production.
        `grape`and `cherry` are used during Development.

        [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)
      enum:
      - blue
      - green
      - grape
      - cherry
      readOnly: true
      title: DeploymentGroup
      type: string
    Config:
      example:
        address: 1062 Folsom St., Suite 200, San Francisco, CA, 94103
        announcements:
        - name: 220121a_modified_clients
          text: |-
            As part of our continued commitment to improve
            safety and awareness, we want to remind you that
            <color='red'>modified clients of any kind are not allowed
            on VRChat</color>, for any reason, and are prohibited
            by the Terms of Service.

            There is no such thing as an 'approved'
            modification, nor do we permit the use of
            any modification, for any purpose, ever.
            <color='red'>Using them can and will result in your
            account being banned!</color>

            In addition, modified clients are the single
            greatest source of <color='red'>compromised and stolen
            accounts</color>-- so please, do not use them!
        apiKey: JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26
        appName: VrChat
        buildVersionTag: master-build-2021-06-24-fred-drakeshoot
        clientApiKey: JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26
        clientBPSCeiling: 18432
        clientDisconnectTimeout: 30000
        clientReservedPlayerBPS: 7168
        clientSentCountAllowance: 15
        contactEmail: hello@vrchat.com
        copyrightEmail: copyright@vrchat.com
        currentTOSVersion: 7
        defaultAvatar: avtr_53856003-8ff2-4002-b78f-da5d028b22bd
        deploymentGroup: green
        devAppVersionStandalone: 0.12.0p3
        devDownloadLinkWindows: www.vrchat.net
        devSdkUrl: https://vrchat.com/home/download
        devSdkVersion: 2020.09.25.00.08
        devServerVersionStandalone: dev_server_01
        disableAvatarCopying: false
        disableAvatarGating: false
        disableCommunityLabs: false
        disableCommunityLabsPromotion: false
        disableEmail: false
        disableEventStream: false
        disableFeedbackGating: false
        disableHello: false
        disableRegistration: false
        disableSteamNetworking: true
        disableTwoFactorAuth: false
        disableUdon: false
        disableUpgradeAccount: false
        downloadLinkWindows: https://www.oculus.com/experiences/rift/997678176960598/
        downloadUrls:
          sdk2: https://files.vrchat.cloud/sdk/VRCSDK2-2021.06.03.14.57_Public.unitypackage
          sdk3-avatars: https://files.vrchat.cloud/sdk/VRCSDK3-AVATAR-2021.06.03.14.57_Public.unitypackage
          sdk3-worlds: https://files.vrchat.cloud/sdk/VRCSDK3-WORLD-2021.06.03.14.57_Public.unitypackage
        dynamicWorldRows:
        - index: 1
          name: Hot
          platform: ThisPlatformSupported
          sortHeading: heat
          sortOrder: descending
          sortOwnership: any
        - index: 10
          name: Games
          platform: ThisPlatformSupported
          sortHeading: heat
          sortOrder: descending
          sortOwnership: any
          tag: author_tag_game
        - index: 11
          name: Updated Recently
          platform: ThisPlatformSupported
          sortHeading: updated
          sortOrder: descending
          sortOwnership: any
        - index: 12
          name: New
          platform: ThisPlatformSupported
          sortHeading: publication
          sortOrder: descending
          sortOwnership: any
        - index: 13
          name: Recent
          platform: ThisPlatformSupported
          sortHeading: recent
          sortOrder: descending
          sortOwnership: any
        - index: 14
          name: Mine
          platform: any
          sortHeading: updated
          sortOrder: descending
          sortOwnership: mine
        - index: 15
          name: Classics
          platform: ThisPlatformSupported
          sortHeading: trending
          sortOrder: descending
          sortOwnership: any
        - index: 2
          name: Exercise
          platform: Any
          sortHeading: shuffle
          sortOrder: descending
          sortOwnership: any
          tag: admin_exercise_row
        - index: 3
          name: 'World Jam: Drawing'
          platform: ThisPlatformSupported
          sortHeading: order
          sortOrder: ascending
          sortOwnership: any
          tag: admin_jam_sketchbook
        - index: 4
          name: Spotlight
          platform: ThisPlatformSupported
          sortHeading: updated
          sortOrder: descending
          sortOwnership: any
          tag: admin_community_spotlight
        - index: 5
          name: Community Labs
          platform: ThisPlatformSupported
          sortHeading: labs
          sortOrder: descending
          sortOwnership: any
        - index: 6
          name: Active Cross Platform
          platform: AllPlatforms
          sortHeading: active
          sortOrder: descending
          sortOwnership: any
        - index: 7
          name: Active My Platform
          platform: ThisPlatformOnly
          sortHeading: active
          sortOrder: descending
          sortOwnership: any
        - index: 8
          name: Random
          platform: ThisPlatformSupported
          sortHeading: shuffle
          sortOrder: descending
          sortOwnership: any
        - index: 9
          name: Avatar Worlds
          platform: ThisPlatformSupported
          sortHeading: heat
          sortOrder: descending
          sortOwnership: any
          tag: author_tag_avatar
        events:
          distanceClose: 2
          distanceFactor: 100
          distanceFar: 80
          groupDistance: 3
          maximumBunchSize: 247
          notVisibleFactor: 100
          playerOrderBucketSize: 5
          playerOrderFactor: 55
          slowUpdateFactorThreshold: 25
          viewSegmentLength: 5
        gearDemoRoomId: "2282253502"
        homepageRedirectTarget: https://hello.vrchat.com
        homeWorldId: wrld_4432ea9b-729c-46e3-8eaf-846aa0a37fdd
        hubWorldId: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        jobsEmail: jobs@vrchat.com
        messageOfTheDay: hello world
        moderationEmail: moderation@vrchat.com
        moderationQueryPeriod: 60
        notAllowedToSelectAvatarInPrivateWorldMessage: For security reasons, you're
          not yet allowed to select avatars in private worlds or upload content. Please
          continue to enjoy VRChat and we'll message you when you've been unlocked.
          Thanks and have fun!
        plugin: no_kick_unlisted
        releaseAppVersionStandalone: 0.12.0p3
        releaseSdkUrl: http://files.vrchat.cloud/sdk/VRCSDK-2019.09.18.12.05_Public.unitypackage
        releaseSdkVersion: VRCSDK-2019.09.18.12.05_Public
        releaseServerVersionStandalone: public_server_01
        sdkDeveloperFaqUrl: https://docs.vrchat.com/docs/frequently-asked-questions#section-why-can-t-i-upload-content-yet-
        sdkDiscordUrl: https://discord.gg/vrchat
        sdkNotAllowedToPublishMessage: "Welcome the VRChat SDK!\r\n\r\nBefore you\
          \ can upload avatars or worlds to VRChat, you'll need to spend more time\
          \ enjoying the app. We do this for security reasons, and so you can learn\
          \ more about us.\r\n\r\nWhen you get the ability to upload, we will notify\
          \ you via email and in VRChat. For now, you can learn and test on your own\
          \ device.\r\n\r\nTo get started, check out the resources below.\r\n\r\n\
          Thank you for your patience, we can't wait to see what you'll build!"
        sdkUnityVersion: 2018.4.20f1
        serverName: prod-api-green-tree-xgq
        supportEmail: support@vrchat.com
        timeOutWorldId: wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc
        tutorialWorldId: wld_7d3d25ec-663e-406e-96a3-e2c4fc0d8104
        updateRateMsMaximum: 1000
        updateRateMsMinimum: 50
        updateRateMsNormal: 200
        updateRateMsUdonManual: 50
        uploadAnalysisPercent: 1
        urlList:
        - assets.vrchat.com
        - drive.google.com
        - facebook.com
        - game.nicovideo.jp
        - live.furality.online
        - live.nicovideo.jp
        - live2.nicovideo.jp
        - nicovideo.jp
        - soundcloud.com
        - tiktok.com
        - twitch.tv
        - v.youku.com
        - vimeo.com
        - vrchat.cloud
        - www.facebook.com
        - www.nicovideo.jp
        - www.tiktok.com
        - www.twitch.tv
        - www.youtube.com
        - youku.com
        - youtu.be
        - youtube.com
        useReliableUdpForVoice: false
        userUpdatePeriod: 60
        userVerificationDelay: 5
        userVerificationRetry: 30
        userVerificationTimeout: 60
        viveWindowsUrl: http://store.steampowered.com/app/438100/
        whiteListedAssetUrls:
        - http://dbinj8iahsbec.cloudfront.net/
        - http://dbinj8iahsbec.cloudfront.net/plugins
        - https://api.vrchat.cloud/api/1/file/
        - https://builds.vrchat.cloud/
        - https://dbinj8iahsbec.cloudfront.net/
        - https://dev-api.vrchat.cloud/api/1/file/
        - https://files.vrchat.cloud/unmanaged/
        worldUpdatePeriod: 60
        youtubedl-hash: E3-C6-63-C3-27-3F-1C-47-48-C6-A7-52-A1-53-03-A5-10-6C-45-37-B1-C3-14-70-BA-44-1F-AE-0E-B2-32-36
        youtubedl-version: 2021-05-16
      properties:
        address:
          description: VRChat's office address
          minLength: 1
          readOnly: true
          type: string
        announcements:
          description: Public Announcements
          items:
            $ref: '#/components/schemas/Config_announcements'
          minItems: 1
          readOnly: true
          type: array
          uniqueItems: true
        apiKey:
          description: apiKey to be used for all other requests
          minLength: 1
          readOnly: true
          type: string
        appName:
          default: VrChat
          deprecated: true
          description: Game name
          minLength: 1
          readOnly: true
          type: string
        buildVersionTag:
          description: Build tag of the API server
          minLength: 1
          readOnly: true
          type: string
        clientApiKey:
          description: apiKey to be used for all other requests
          minLength: 1
          readOnly: true
          type: string
        clientBPSCeiling:
          description: Unknown
          type: number
        clientDisconnectTimeout:
          description: Unknown
          type: number
        clientReservedPlayerBPS:
          description: Unknown
          type: number
        clientSentCountAllowance:
          description: Unknown
          type: number
        contactEmail:
          description: VRChat's contact email
          minLength: 1
          readOnly: true
          type: string
        copyrightEmail:
          description: VRChat's copyright-issues-related email
          minLength: 1
          readOnly: true
          type: string
        currentTOSVersion:
          description: Current version number of the Terms of Service
          readOnly: true
          type: number
        defaultAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        deploymentGroup:
          $ref: '#/components/schemas/DeploymentGroup'
        devAppVersionStandalone:
          deprecated: true
          description: Version number for game development build
          minLength: 1
          readOnly: true
          type: string
        devDownloadLinkWindows:
          deprecated: true
          description: Developer Download link
          minLength: 1
          readOnly: true
          type: string
        devSdkUrl:
          deprecated: true
          description: Link to download the development SDK, use downloadUrls instead
          minLength: 1
          readOnly: true
          type: string
        devSdkVersion:
          deprecated: true
          description: Version of the development SDK
          minLength: 1
          readOnly: true
          type: string
        devServerVersionStandalone:
          deprecated: true
          description: Version number for server development build
          minLength: 1
          readOnly: true
          type: string
        disableAvatarCopying:
          default: false
          description: Toggles if copying avatars should be disabled
          type: boolean
        disableAvatarGating:
          default: false
          description: Toggles if avatar gating should be disabled. Avatar gating
            restricts uploading of avatars to people with the `system_avatar_access`
            Tag or `admin_avatar_access` Tag
          type: boolean
        disableCommunityLabs:
          default: false
          description: Toggles if the Community Labs should be disabled
          type: boolean
        disableCommunityLabsPromotion:
          default: false
          description: Toggles if promotion out of Community Labs should be disabled
          type: boolean
        disableEmail:
          default: false
          description: Unknown
          type: boolean
        disableEventStream:
          default: false
          description: Toggles if Analytics should be disabled (this sreportedly not
            used in the Client)
          type: boolean
        disableFeedbackGating:
          default: false
          description: Toggles if feedback gating should be disabled. Feedback gating
            restricts submission of feedback (reporting a World or User) to people
            with the `system_feedback_access` Tag.
          type: boolean
        disableHello:
          default: false
          description: Unknown
          type: boolean
        disableRegistration:
          default: false
          description: Toggles if new user account registration should be disabled
          type: boolean
        disableSteamNetworking:
          default: true
          description: Toggles if Steam Networking should be disabled. VRChat these
            days uses Photon Unity Networking (PUN) instead.
          type: boolean
        disableTwoFactorAuth:
          default: false
          deprecated: true
          description: Toggles if 2FA should be disabled.
          type: boolean
        disableUdon:
          default: false
          description: Toggles if Udon should be universally disabled in-game.
          type: boolean
        disableUpgradeAccount:
          default: false
          description: Toggles if account upgrading "linking with Steam/Oculus" should
            be disabled.
          type: boolean
        downloadLinkWindows:
          description: Download link for game on the Oculus Rift website.
          minLength: 1
          readOnly: true
          type: string
        downloadUrls:
          $ref: '#/components/schemas/Config_downloadUrls'
        dynamicWorldRows:
          description: Array of DynamicWorldRow objects, used by the game to display
            the list of world rows
          items:
            $ref: '#/components/schemas/Config_dynamicWorldRows'
          minItems: 1
          readOnly: true
          type: array
          uniqueItems: true
        events:
          $ref: '#/components/schemas/Config_events'
        gearDemoRoomId:
          deprecated: true
          description: Unknown
          minLength: 1
          readOnly: true
          type: string
        homepageRedirectTarget:
          default: https://hello.vrchat.com
          description: Redirect target if you try to open the base API domain in your
            browser
          minLength: 1
          readOnly: true
          type: string
        homeWorldId:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        hubWorldId:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        jobsEmail:
          description: VRChat's job application email
          minLength: 1
          readOnly: true
          type: string
        messageOfTheDay:
          deprecated: true
          description: MOTD
          minLength: 1
          readOnly: true
          type: string
        moderationEmail:
          description: VRChat's moderation related email
          minLength: 1
          readOnly: true
          type: string
        moderationQueryPeriod:
          description: Unknown
          type: number
        notAllowedToSelectAvatarInPrivateWorldMessage:
          description: Used in-game to notify a user they aren't allowed to select
            avatars in private worlds
          minLength: 1
          readOnly: true
          type: string
        plugin:
          description: Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual)
            to run in each instance
          minLength: 1
          readOnly: true
          type: string
        releaseAppVersionStandalone:
          deprecated: true
          description: Version number for game release build
          minLength: 1
          readOnly: true
          type: string
        releaseSdkUrl:
          deprecated: true
          description: Link to download the release SDK
          minLength: 1
          readOnly: true
          type: string
        releaseSdkVersion:
          deprecated: true
          description: Version of the release SDK
          minLength: 1
          readOnly: true
          type: string
        releaseServerVersionStandalone:
          deprecated: true
          description: Version number for server release build
          minLength: 1
          readOnly: true
          type: string
        sdkDeveloperFaqUrl:
          description: Link to the developer FAQ
          minLength: 1
          readOnly: true
          type: string
        sdkDiscordUrl:
          description: Link to the official VRChat Discord
          minLength: 1
          readOnly: true
          type: string
        sdkNotAllowedToPublishMessage:
          description: Used in the SDK to notify a user they aren't allowed to upload
            avatars/worlds yet
          minLength: 1
          readOnly: true
          type: string
        sdkUnityVersion:
          description: Unity version supported by the SDK
          minLength: 1
          readOnly: true
          type: string
        serverName:
          description: Server name of the API server currently responding
          minLength: 1
          readOnly: true
          type: string
        supportEmail:
          description: VRChat's support email
          minLength: 1
          readOnly: true
          type: string
        timeOutWorldId:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        tutorialWorldId:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        updateRateMsMaximum:
          description: Unknown
          readOnly: true
          type: number
        updateRateMsMinimum:
          description: Unknown
          readOnly: true
          type: number
        updateRateMsNormal:
          description: Unknown
          readOnly: true
          type: number
        updateRateMsUdonManual:
          description: Unknown
          readOnly: true
          type: number
        uploadAnalysisPercent:
          description: Unknown
          readOnly: true
          type: number
        urlList:
          description: List of allowed URLs that bypass the "Allow untrusted URL's"
            setting in-game
          items:
            readOnly: true
            type: string
          readOnly: true
          type: array
        useReliableUdpForVoice:
          default: false
          description: Unknown
          type: boolean
        userUpdatePeriod:
          description: Unknown
          readOnly: true
          type: number
        userVerificationDelay:
          description: Unknown
          readOnly: true
          type: number
        userVerificationRetry:
          description: Unknown
          readOnly: true
          type: number
        userVerificationTimeout:
          description: Unknown
          readOnly: true
          type: number
        viveWindowsUrl:
          description: Download link for game on the Steam website.
          minLength: 1
          readOnly: true
          type: string
        whiteListedAssetUrls:
          description: List of allowed URLs that are allowed to host avatar assets
          items:
            readOnly: true
            type: string
          readOnly: true
          type: array
        worldUpdatePeriod:
          description: Unknown
          readOnly: true
          type: number
        youtubedl-hash:
          description: Currently used youtube-dl.exe hash in SHA-256-delimited format
          minLength: 1
          readOnly: true
          type: string
        youtubedl-version:
          description: Currently used youtube-dl.exe version
          minLength: 1
          readOnly: true
          type: string
      required:
      - address
      - announcements
      - apiKey
      - appName
      - buildVersionTag
      - clientApiKey
      - contactEmail
      - copyrightEmail
      - currentTOSVersion
      - defaultAvatar
      - deploymentGroup
      - devAppVersionStandalone
      - devDownloadLinkWindows
      - devSdkUrl
      - devSdkVersion
      - devServerVersionStandalone
      - disableAvatarCopying
      - disableAvatarGating
      - disableCommunityLabs
      - disableCommunityLabsPromotion
      - disableEventStream
      - disableFeedbackGating
      - disableRegistration
      - disableSteamNetworking
      - disableTwoFactorAuth
      - disableUdon
      - disableUpgradeAccount
      - downloadLinkWindows
      - downloadUrls
      - dynamicWorldRows
      - events
      - gearDemoRoomId
      - homeWorldId
      - homepageRedirectTarget
      - hubWorldId
      - jobsEmail
      - messageOfTheDay
      - moderationEmail
      - moderationQueryPeriod
      - notAllowedToSelectAvatarInPrivateWorldMessage
      - plugin
      - releaseAppVersionStandalone
      - releaseSdkUrl
      - releaseSdkVersion
      - releaseServerVersionStandalone
      - sdkDeveloperFaqUrl
      - sdkDiscordUrl
      - sdkNotAllowedToPublishMessage
      - sdkUnityVersion
      - serverName
      - supportEmail
      - timeOutWorldId
      - tutorialWorldId
      - updateRateMsMaximum
      - updateRateMsMinimum
      - updateRateMsNormal
      - updateRateMsUdonManual
      - uploadAnalysisPercent
      - urlList
      - useReliableUdpForVoice
      - userUpdatePeriod
      - userVerificationDelay
      - userVerificationRetry
      - userVerificationTimeout
      - viveWindowsUrl
      - whiteListedAssetUrls
      - worldUpdatePeriod
      - youtubedl-hash
      - youtubedl-version
      title: API Config
      type: object
    NotificationType:
      enum:
      - all
      - broadcast
      - friendRequest
      - invite
      - message
      - RequestInvite
      - votetokick
      title: NotificationType
      type: string
    Notification:
      example:
        senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        created_at: 2000-01-23T04:56:07.000+00:00
        details: 'OneOf: {}, NotificationDetailInvite, NotificationDetailRequestInvite,
          NotificationDetailRequestInviteResponse, NotificationDetailVoteToKick'
        id: id
        message: This is a generated invite to VRChat Hub
        senderUsername: senderUsername
        seen: false
      properties:
        id:
          minLength: 1
          type: string
        senderUserId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        senderUsername:
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/NotificationType'
        message:
          example: This is a generated invite to VRChat Hub
          type: string
        details:
          default: '{}'
          description: '**NOTICE:** This is not a JSON object, this is a json **encoded**
            object, meaning you have to json-de-encode to get the NotificationDetail
            object depending on the NotificationType.'
          example: 'OneOf: {}, NotificationDetailInvite, NotificationDetailRequestInvite,
            NotificationDetailRequestInviteResponse, NotificationDetailVoteToKick'
          type: string
        seen:
          default: false
          type: boolean
        created_at:
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - details
      - id
      - message
      - seen
      - senderUserId
      - senderUsername
      - type
      title: Notification
      type: object
    FileID:
      example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
      pattern: file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
      readOnly: true
      title: FileID
      type: string
    MIMEType:
      enum:
      - image/jpeg
      - image/jpg
      - image/png
      - image/webp
      - image/gif
      - image/bmp
      - image/svgÔºãxml
      - image/tiff
      - application/x-avatar
      - application/x-world
      - application/gzip
      - application/x-rsync-signature
      - application/x-rsync-delta
      - application/octet-stream
      example: image/jpeg
      title: MIMEType
      type: string
    FileStatus:
      enum:
      - waiting
      - complete
      - none
      example: complete
      readOnly: true
      title: FileStatus
      type: string
    FileData:
      example:
        fileName: fileName
        sizeInBytes: 0.08008281904610115
        uploadId: uploadId
        category: multipart
        url: url
        md5: md5
        status: complete
      properties:
        fileName:
          minLength: 1
          type: string
        url:
          minLength: 1
          type: string
        md5:
          minLength: 0
          type: string
        sizeInBytes:
          minimum: 0
          type: number
        status:
          $ref: '#/components/schemas/FileStatus'
        category:
          enum:
          - multipart
          - queued
          - simple
          minLength: 1
          readOnly: true
          type: string
        uploadId:
          default: ""
          minLength: 0
          type: string
      required:
      - category
      - fileName
      - md5
      - sizeInBytes
      - status
      - uploadId
      - url
      title: FileData
      type: object
    FileVersion:
      example:
        file:
          fileName: fileName
          sizeInBytes: 0.08008281904610115
          uploadId: uploadId
          category: multipart
          url: url
          md5: md5
          status: complete
        deleted: true
        signature:
          fileName: fileName
          sizeInBytes: 0.08008281904610115
          uploadId: uploadId
          category: multipart
          url: url
          md5: md5
          status: complete
        delta:
          fileName: fileName
          sizeInBytes: 0.08008281904610115
          uploadId: uploadId
          category: multipart
          url: url
          md5: md5
          status: complete
        created_at: 2000-01-23T04:56:07.000+00:00
        version: 0
        status: complete
      properties:
        version:
          default: 0
          description: Incremental version counter, can only be increased.
          example: 0
          minimum: 0
          type: number
        status:
          $ref: '#/components/schemas/FileStatus'
        created_at:
          format: date-time
          readOnly: true
          type: string
        file:
          $ref: '#/components/schemas/FileData'
        delta:
          $ref: '#/components/schemas/FileData'
        signature:
          $ref: '#/components/schemas/FileData'
        deleted:
          default: true
          description: Usually only present if `true`
          type: boolean
      required:
      - created_at
      - status
      - version
      title: FileVersion
      type: object
    File:
      example:
        extension: .unitypackage
        versions:
        - file:
            fileName: fileName
            sizeInBytes: 0.08008281904610115
            uploadId: uploadId
            category: multipart
            url: url
            md5: md5
            status: complete
          deleted: true
          signature:
            fileName: fileName
            sizeInBytes: 0.08008281904610115
            uploadId: uploadId
            category: multipart
            url: url
            md5: md5
            status: complete
          delta:
            fileName: fileName
            sizeInBytes: 0.08008281904610115
            uploadId: uploadId
            category: multipart
            url: url
            md5: md5
            status: complete
          created_at: 2000-01-23T04:56:07.000+00:00
          version: 0
          status: complete
        - file:
            fileName: fileName
            sizeInBytes: 0.08008281904610115
            uploadId: uploadId
            category: multipart
            url: url
            md5: md5
            status: complete
          deleted: true
          signature:
            fileName: fileName
            sizeInBytes: 0.08008281904610115
            uploadId: uploadId
            category: multipart
            url: url
            md5: md5
            status: complete
          delta:
            fileName: fileName
            sizeInBytes: 0.08008281904610115
            uploadId: uploadId
            category: multipart
            url: url
            md5: md5
            status: complete
          created_at: 2000-01-23T04:56:07.000+00:00
          version: 0
          status: complete
        name: Example File
        id: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
        mimeType: image/jpeg
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        tags:
        - null
        - null
      properties:
        id:
          $ref: '#/components/schemas/FileID'
        name:
          example: Example File
          minLength: 0
          type: string
        ownerId:
          $ref: '#/components/schemas/UserID'
        mimeType:
          $ref: '#/components/schemas/MIMEType'
        extension:
          example: .unitypackage
          minLength: 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        versions:
          items:
            $ref: '#/components/schemas/FileVersion'
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - extension
      - id
      - mimeType
      - name
      - ownerId
      - tags
      - versions
      title: File
      type: object
    LimitedUnityPackage:
      example:
        unityVersion: 2018.4.14f1
      properties:
        platform:
          $ref: '#/components/schemas/Platform'
        unityVersion:
          example: 2018.4.14f1
          minLength: 1
          type: string
      required:
      - platform
      - unityVersion
      title: LimitedUnityPackage
      type: object
    LimitedWorld:
      example:
        favorites: 6.027456183070403
        heat: 5.962133916683182
        created_at: 2000-01-23T04:56:07.000+00:00
        authorId: authorId
        capacity: 0.8008281904610115
        tags:
        - null
        - null
        thumbnailImageUrl: thumbnailImageUrl
        updated_at: 2000-01-23T04:56:07.000+00:00
        authorName: authorName
        imageUrl: imageUrl
        organization: organization
        popularity: 1.4658129805029452
        name: name
        releaseStatus: releaseStatus
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        labsPublicationDate: labsPublicationDate
        publicationDate: publicationDate
        unityPackages:
        - unityVersion: 2018.4.14f1
        - unityVersion: 2018.4.14f1
        occupants: 5.637376656633329
      properties:
        id:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        name:
          minLength: 1
          type: string
        authorId:
          minLength: 1
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          type: number
        imageUrl:
          minLength: 1
          type: string
        thumbnailImageUrl:
          minLength: 1
          type: string
        releaseStatus:
          minLength: 1
          type: string
        organization:
          minLength: 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        favorites:
          type: number
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        publicationDate:
          readOnly: true
          type: string
        labsPublicationDate:
          minLength: 1
          type: string
        unityPackages:
          items:
            $ref: '#/components/schemas/LimitedUnityPackage'
          minItems: 1
          type: array
        popularity:
          type: number
        heat:
          type: number
        occupants:
          type: number
      required:
      - authorId
      - authorName
      - capacity
      - created_at
      - favorites
      - heat
      - id
      - imageUrl
      - labsPublicationDate
      - name
      - occupants
      - organization
      - popularity
      - publicationDate
      - releaseStatus
      - tags
      - thumbnailImageUrl
      - unityPackages
      - updated_at
      type: object
    ReleaseStatus:
      default: public
      enum:
      - public
      - private
      - hidden
      example: public
      title: ReleaseStatus
      type: string
    UnityPackageID:
      example: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
      pattern: (unp)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
      title: UnityPackageID
      type: string
    UnityPackage:
      example:
        unityVersion: 2018.4.12f1
        assetUrlObject: '{}'
        pluginUrlObject: '{}'
        unitySortNumber: 0.08008281904610115
        assetVersion: 6.027456183070403
        created_at: 2000-01-23T04:56:07.000+00:00
        pluginUrl: pluginUrl
        id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
        assetUrl: assetUrl
      properties:
        id:
          example: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          pattern: (unp)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: UnityPackageID
          type: string
        assetUrl:
          minLength: 1
          type: string
        assetUrlObject:
          type: object
        pluginUrl:
          type: string
        pluginUrlObject:
          type: object
        unityVersion:
          default: 5.3.4p1
          example: 2018.4.12f1
          minLength: 1
          type: string
        unitySortNumber:
          minimum: 0
          type: number
        assetVersion:
          type: number
        platform:
          $ref: '#/components/schemas/Platform'
        created_at:
          format: date-time
          type: string
      required:
      - assetVersion
      - id
      - platform
      - unityVersion
      title: UnityPackage
      type: object
      x-examples:
        example-1:
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          assetUrl: https://api.vrchat.cloud/api/1/file/file_cd0caa7b-69ba-4715-8dfe-7d667a9d2537/65/file
          assetUrlObject: {}
          pluginUrl: ""
          pluginUrlObject: {}
          unityVersion: 2018.4.14f1
          unitySortNumber: 20180414000
          assetVersion: 4
          platform: standalonewindows
          created_at: 2020-09-10T06:13:27.777Z
    World:
      example:
        favorites: 12024
        heat: 5
        featured: false
        instances:
        - - '{}'
          - '{}'
        - - '{}'
          - '{}'
        assetUrlObject: '{}'
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        publicOccupants: 46
        capacity: 8
        visits: 9988675
        thumbnailImageUrl: thumbnailImageUrl
        privateOccupants: 1
        updated_at: 2000-01-23T04:56:07.000+00:00
        imageUrl: imageUrl
        pluginUrlObject: '{}'
        popularity: 8
        releaseStatus: public
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        publicationDate: 2000-01-23T04:56:07.000+00:00
        assetUrl: assetUrl
        occupants: 47
        previewYoutubeId: previewYoutubeId
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        version: 68
        tags:
        - null
        - null
        unityPackageUrlObject: '{}'
        authorName: authorName
        organization: vrchat
        name: name
        namespace: namespace
        labsPublicationDate: none
        unityPackages:
        - unityVersion: 2018.4.12f1
          assetUrlObject: '{}'
          pluginUrlObject: '{}'
          unitySortNumber: 0.08008281904610115
          assetVersion: 6.027456183070403
          created_at: 2000-01-23T04:56:07.000+00:00
          pluginUrl: pluginUrl
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          assetUrl: assetUrl
        - unityVersion: 2018.4.12f1
          assetUrlObject: '{}'
          pluginUrlObject: '{}'
          unitySortNumber: 0.08008281904610115
          assetVersion: 6.027456183070403
          created_at: 2000-01-23T04:56:07.000+00:00
          pluginUrl: pluginUrl
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          assetUrl: assetUrl
      properties:
        assetUrl:
          minLength: 1
          type: string
        assetUrlObject:
          type: object
        authorId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        authorName:
          minLength: 1
          readOnly: true
          type: string
        capacity:
          example: 8
          minimum: 0
          readOnly: true
          type: number
        created_at:
          format: date-time
          readOnly: true
          type: string
        description:
          minLength: 0
          type: string
        favorites:
          default: 0
          example: 12024
          minimum: 0
          readOnly: true
          type: number
        featured:
          default: false
          type: boolean
        heat:
          default: 0
          example: 5
          minimum: 0
          readOnly: true
          type: number
        id:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        imageUrl:
          minLength: 1
          type: string
        instances:
          items:
            items:
              type: object
            maxItems: 2
            minItems: 2
            type: array
          type: array
        labsPublicationDate:
          example: none
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        namespace:
          type: string
        occupants:
          default: 0
          example: 47
          minimum: 0
          readOnly: true
          type: number
        organization:
          default: vrchat
          example: vrchat
          minLength: 1
          type: string
        pluginUrlObject:
          type: object
        popularity:
          default: 0
          example: 8
          minimum: 0
          readOnly: true
          type: number
        previewYoutubeId:
          type: string
        privateOccupants:
          default: 0
          example: 1
          minimum: 0
          readOnly: true
          type: number
        publicOccupants:
          default: 0
          example: 46
          minimum: 0
          readOnly: true
          type: number
        publicationDate:
          format: date-time
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        thumbnailImageUrl:
          minLength: 1
          type: string
        unityPackageUrlObject:
          type: object
        unityPackages:
          items:
            $ref: '#/components/schemas/UnityPackage'
          minItems: 1
          type: array
        updated_at:
          format: date-time
          type: string
        version:
          default: 0
          example: 68
          minimum: 0
          type: number
        visits:
          default: 0
          example: 9988675
          minimum: 0
          readOnly: true
          type: number
      required:
      - assetUrl
      - assetUrlObject
      - authorId
      - authorName
      - capacity
      - created_at
      - description
      - featured
      - heat
      - id
      - imageUrl
      - labsPublicationDate
      - name
      - namespace
      - organization
      - pluginUrlObject
      - popularity
      - publicationDate
      - releaseStatus
      - tags
      - thumbnailImageUrl
      - unityPackageUrlObject
      - unityPackages
      - updated_at
      - version
      - visits
      title: World
      type: object
    Instance:
      example:
        worldId: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        n_users: 0.6027456183070403
        photonRegion: photonRegion
        active: true
        clientNumber: clientNumber
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        type: type
        nonce: nonce
        users:
        - '{}'
        - '{}'
        capacity: 3.203312761844046
        platforms:
          android: 1.4658129805029452
          standalonewindows: 5.962133916683182
        tags:
        - null
        - null
        canRequestInvite: true
        instanceId: instanceId
        world: '{}'
        permanent: false
        name: name
        location: location
        id: id
        region: region
        shortName: shortName
        full: false
      properties:
        active:
          default: true
          type: boolean
        canRequestInvite:
          default: true
          type: boolean
        capacity:
          maximum: 40
          minimum: 0
          type: number
        clientNumber:
          minLength: 1
          type: string
        full:
          default: false
          type: boolean
        id:
          minLength: 1
          type: string
        instanceId:
          minLength: 1
          type: string
        location:
          minLength: 1
          type: string
        n_users:
          minimum: 0
          type: number
        name:
          minLength: 1
          type: string
        nonce:
          minLength: 1
          type: string
        ownerId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        permanent:
          default: false
          type: boolean
        photonRegion:
          minLength: 1
          type: string
        platforms:
          $ref: '#/components/schemas/Instance_platforms'
        region:
          minLength: 1
          type: string
        shortName:
          minLength: 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        type:
          minLength: 1
          type: string
        users:
          deprecated: true
          description: Always empty on non-existing instances, and non-present on
            existing instances.
          items:
            type: object
          type: array
        world:
          deprecated: true
          description: Only present on non-existing instances, and only contains a
            very small subject of World object. Use World API instead.
          type: object
        worldId:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
      required:
      - active
      - canRequestInvite
      - capacity
      - clientNumber
      - full
      - id
      - instanceId
      - location
      - n_users
      - name
      - ownerId
      - permanent
      - photonRegion
      - platforms
      - region
      - shortName
      - tags
      - type
      - worldId
      title: Instance
      type: object
    FavoriteID:
      example: fvrt_9568d189-8776-44a5-a8c8-defc981e44de
      pattern: fvrt_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
      readOnly: true
      title: FavoriteID
      type: string
    FavoriteType:
      enum:
      - world
      - friend
      - avatar
      readOnly: true
      title: FavoriteType
      type: string
    Favorite:
      example:
        favoriteId: favoriteId
        id: fvrt_9568d189-8776-44a5-a8c8-defc981e44de
        tags:
        - null
        - null
      properties:
        id:
          example: fvrt_9568d189-8776-44a5-a8c8-defc981e44de
          pattern: fvrt_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          readOnly: true
          title: FavoriteID
          type: string
        type:
          $ref: '#/components/schemas/FavoriteType'
        favoriteId:
          description: MUST be either AvatarID, UserID or WorldID.
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - favoriteId
      - id
      - tags
      - type
      title: Favorite
      type: object
    FavoriteGroupID:
      example: fvgrp_8a02a44b-dc3a-4a9a-bc77-77fa37996fc7
      pattern: fvgrp_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
      readOnly: true
      title: FavoriteGroupID
      type: string
    FavoriteGroupVisibility:
      default: private
      enum:
      - private
      - friends
      - public
      example: private
      title: FavoriteGroupVisibility
      type: string
    FavoriteGroup:
      example:
        visibility: private
        ownerDisplayName: ownerDisplayName
        displayName: displayName
        name: name
        id: fvgrp_8a02a44b-dc3a-4a9a-bc77-77fa37996fc7
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        tags:
        - null
        - null
      properties:
        id:
          example: fvgrp_8a02a44b-dc3a-4a9a-bc77-77fa37996fc7
          pattern: fvgrp_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          readOnly: true
          title: FavoriteGroupID
          type: string
        ownerId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        ownerDisplayName:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        displayName:
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/FavoriteType'
        visibility:
          $ref: '#/components/schemas/FavoriteGroupVisibility'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - displayName
      - id
      - name
      - ownerDisplayName
      - ownerId
      - tags
      - type
      - visibility
      title: FavoriteGroup
      type: object
    Avatar:
      example:
        featured: false
        unityPackageUrl: unityPackageUrl
        assetUrlObject: '{}'
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        version: 68
        tags:
        - null
        - null
        unityPackageUrlObject:
          unityPackageUrl: unityPackageUrl
        thumbnailImageUrl: thumbnailImageUrl
        updated_at: 2000-01-23T04:56:07.000+00:00
        authorName: authorName
        imageUrl: imageUrl
        name: name
        releaseStatus: public
        id: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        unityPackages:
        - unityVersion: 2018.4.12f1
          assetUrlObject: '{}'
          pluginUrlObject: '{}'
          unitySortNumber: 0.08008281904610115
          assetVersion: 6.027456183070403
          created_at: 2000-01-23T04:56:07.000+00:00
          pluginUrl: pluginUrl
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          assetUrl: assetUrl
        - unityVersion: 2018.4.12f1
          assetUrlObject: '{}'
          pluginUrlObject: '{}'
          unitySortNumber: 0.08008281904610115
          assetVersion: 6.027456183070403
          created_at: 2000-01-23T04:56:07.000+00:00
          pluginUrl: pluginUrl
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          assetUrl: assetUrl
        assetUrl: assetUrl
      properties:
        assetUrl:
          description: Not present from general serach `/avatars`, only on specific
            requests `/avatars/{avatarId}`.
          minLength: 1
          type: string
        assetUrlObject:
          description: |-
            Not present from general serach `/avatars`, only on specific requests `/avatars/{avatarId}`.
            **Deprecation:** `Object` has unknown usage/fields, and is always empty. Use normal `Url` field instead.
          type: object
        authorId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        authorName:
          minLength: 1
          readOnly: true
          type: string
        created_at:
          format: date-time
          readOnly: true
          type: string
        description:
          minLength: 0
          type: string
        featured:
          default: false
          type: boolean
        id:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        thumbnailImageUrl:
          minLength: 1
          type: string
        unityPackages:
          items:
            $ref: '#/components/schemas/UnityPackage'
          minItems: 1
          type: array
          uniqueItems: true
        unityPackageUrl:
          type: string
        unityPackageUrlObject:
          $ref: '#/components/schemas/Avatar_unityPackageUrlObject'
        updated_at:
          format: date-time
          type: string
        version:
          default: 0
          example: 68
          minimum: 0
          readOnly: true
          type: number
      required:
      - authorId
      - authorName
      - created_at
      - description
      - featured
      - id
      - imageUrl
      - name
      - releaseStatus
      - tags
      - thumbnailImageUrl
      - unityPackageUrl
      - unityPackageUrlObject
      - unityPackages
      - updated_at
      - version
      title: Avatar
      type: object
    PlayerModerationID:
      example: pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
      pattern: pmod_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
      title: PlayerModerationID
      type: string
    PlayerModerationType:
      default: showAvatar
      enum:
      - mute
      - unmute
      - block
      - unblock
      - hideAvatar
      - showAvatar
      example: showAvatar
      title: PlayerModerationType
      type: string
    PlayerModeration:
      example:
        sourceDisplayName: sourceDisplayName
        created: 2000-01-23T04:56:07.000+00:00
        targetDisplayName: targetDisplayName
        targetUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        id: pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
        sourceUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        type: showAvatar
      properties:
        id:
          example: pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
          pattern: pmod_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: PlayerModerationID
          type: string
        type:
          $ref: '#/components/schemas/PlayerModerationType'
        sourceUserId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        sourceDisplayName:
          minLength: 1
          type: string
        targetUserId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        targetDisplayName:
          minLength: 1
          type: string
        created:
          format: date-time
          type: string
      required:
      - created
      - id
      - sourceDisplayName
      - sourceUserId
      - targetDisplayName
      - targetUserId
      - type
      title: PlayerModeration
      type: object
    inline_response_200:
      example:
        ok: true
        token: token
      properties:
        ok:
          type: boolean
        token:
          minLength: 1
          type: string
      required:
      - ok
      - token
      type: object
    inline_response_401:
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
      type: object
    inline_object:
      properties:
        code:
          type: string
      required:
      - code
      type: object
    inline_response_200_1:
      example:
        verified: true
      properties:
        verified:
          type: boolean
      required:
      - verified
      type: object
    inline_object_1:
      properties:
        code:
          type: string
      required:
      - code
      type: object
    inline_object_2:
      properties:
        email:
          type: string
        birthday:
          format: date
          type: string
        acceptedTOSVersion:
          type: number
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        status:
          $ref: '#/components/schemas/UserStatus'
        statusDescription:
          type: string
        bio:
          minLength: 0
          type: string
        bioLinks:
          items:
            type: string
          type: array
        userIcon:
          description: MUST be a valid VRChat /file/ url.
          example: https://api.vrchat.cloud/api/1/file/file_76dc2964-0ce8-41df-b2e7-8edf994fee31/1
          minLength: 0
          type: string
      type: object
    inline_response_200_2:
      example:
        serverName: serverName
        buildVersionTag: buildVersionTag
        ok: true
      properties:
        ok:
          type: boolean
        serverName:
          minLength: 1
          type: string
        buildVersionTag:
          minLength: 1
          type: string
      required:
      - buildVersionTag
      - ok
      - serverName
      type: object
    inline_response_200_3:
      example:
        isFriend: false
        outgoingRequest: false
        incomingRequest: false
      properties:
        isFriend:
          default: false
          type: boolean
        outgoingRequest:
          default: false
          type: boolean
        incomingRequest:
          default: false
          type: boolean
      required:
      - incomingRequest
      - isFriend
      - outgoingRequest
      type: object
    inline_object_3:
      properties:
        name:
          minLength: 0
          type: string
        mimeType:
          $ref: '#/components/schemas/MIMEType'
        extension:
          minLength: 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - extension
      - mimeType
      - name
      type: object
    inline_object_4:
      properties:
        signatureMd5:
          minLength: 1
          type: string
        signatureSizeInBytes:
          type: number
        fileMd5:
          minLength: 1
          type: string
        fileSizeInBytes:
          type: number
      required:
      - signatureMd5
      - signatureSizeInBytes
      type: object
    inline_response_200_4:
      example:
        fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
        nextPartNumber: 0
        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
        parts:
        - '{}'
        - '{}'
        maxParts: 1000
        etags:
        - '{}'
        - '{}'
      properties:
        uploadId:
          example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
          minLength: 1
          readOnly: true
          type: string
        fileName:
          example: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
          minLength: 1
          readOnly: true
          type: string
        nextPartNumber:
          example: 0
          minimum: 0
          readOnly: true
          type: number
        maxParts:
          example: 1000
          minimum: 1
          readOnly: true
          type: number
        parts:
          items:
            readOnly: true
            type: object
          minItems: 0
          readOnly: true
          type: array
        etags:
          description: Unknown
          items:
            readOnly: true
            type: object
          minItems: 0
          readOnly: true
          type: array
      readOnly: true
      required:
      - etags
      - fileName
      - maxParts
      - nextPartNumber
      - parts
      - uploadId
      type: object
    inline_response_200_5:
      example:
        url: url
      properties:
        url:
          minLength: 1
          type: string
      required:
      - url
      type: object
    inline_object_5:
      properties:
        etags:
          description: Array of ETags uploaded.
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        nextPartNumber:
          default: "0"
          deprecated: true
          description: Always a zero in string form, despite how many parts uploaded.
          example: "0"
          maxLength: 1
          minLength: 1
          pattern: "0"
          type: string
        maxParts:
          default: "0"
          deprecated: true
          description: Always a zero in string form, despite how many parts uploaded.
          example: "0"
          maxLength: 1
          minLength: 1
          pattern: "0"
          type: string
      required:
      - maxParts
      - nextPartNumber
      type: object
    inline_object_6:
      properties:
        assetUrl:
          minLength: 1
          type: string
        assetVersion:
          minLength: 1
          type: string
        authorId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          default: 16
          example: 16
          maximum: 40
          minimum: 1
          type: integer
        description:
          type: string
        id:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        platform:
          $ref: '#/components/schemas/Platform'
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        unityPackageUrl:
          minLength: 1
          type: string
        unityVersion:
          default: 5.3.4p1
          example: 2018.4.20f1
          minLength: 1
          type: string
      required:
      - assetUrl
      - imageUrl
      - name
      type: object
    inline_object_7:
      properties:
        assetUrl:
          minLength: 1
          type: string
        assetVersion:
          minLength: 1
          type: string
        authorId:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          default: 16
          example: 16
          maximum: 40
          minimum: 1
          type: integer
        description:
          type: string
        id:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        platform:
          $ref: '#/components/schemas/Platform'
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        unityPackageUrl:
          minLength: 1
          type: string
        unityVersion:
          default: 5.3.4p1
          example: 2018.4.20f1
          minLength: 1
          type: string
      type: object
    inline_response_200_6:
      example:
        metadata: '{}'
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
      properties:
        id:
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: (^$|offline|(wrld|wld)_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12})
          title: WorldID
          type: string
        metadata:
          readOnly: true
          type: object
      readOnly: true
      required:
      - id
      - metadata
      type: object
    inline_response_200_7:
      example:
        canPubilsh: true
      properties:
        canPubilsh:
          default: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - canPubilsh
      type: object
    inline_object_8:
      properties:
        type:
          $ref: '#/components/schemas/FavoriteType'
        favoriteId:
          description: Must be either AvatarID, WorldID or UserID.
          type: string
        tags:
          description: Tags indicate which group this favorite belongs to. Adding
            multiple groups makes it show up in all. Removing it from one in that
            case removes it from all.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - favoriteId
      - tags
      - type
      type: object
    inline_object_9:
      properties:
        displayName:
          type: string
        visibility:
          $ref: '#/components/schemas/FavoriteGroupVisibility'
        tags:
          description: Tags on FavoriteGroups are believed to do nothing.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      type: object
    inline_object_10:
      properties:
        assetUrl:
          type: string
        id:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        imageUrl:
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        version:
          default: 1
          minimum: 0
          type: number
        unityPackageUrl:
          type: string
      required:
      - imageUrl
      - name
      type: object
    inline_object_11:
      properties:
        assetUrl:
          type: string
        id:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}
          title: AvatarID
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        imageUrl:
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        version:
          default: 1
          minimum: 0
          type: number
        unityPackageUrl:
          type: string
      type: object
    inline_object_12:
      additionalProperties: false
      properties:
        moderated:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        type:
          $ref: '#/components/schemas/PlayerModerationType'
      required:
      - moderated
      - type
      type: object
    inline_object_13:
      properties:
        moderated:
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          readOnly: true
          title: UserID
          type: string
        type:
          $ref: '#/components/schemas/PlayerModerationType'
      required:
      - type
      type: object
    Config_announcements:
      description: Public Announcement
      properties:
        name:
          description: Announcement name
          minLength: 1
          readOnly: true
          type: string
        text:
          description: Announcement text
          minLength: 1
          readOnly: true
          type: string
      readOnly: true
      required:
      - name
      - text
      type: object
    Config_downloadUrls:
      description: Download links for various development assets
      properties:
        sdk2:
          deprecated: true
          description: Download link for legacy SDK2
          minLength: 1
          readOnly: true
          type: string
        sdk3-avatars:
          description: Download link for SDK3 for Avatars
          minLength: 1
          readOnly: true
          type: string
        sdk3-worlds:
          description: Download link for SDK3 for Worlds
          minLength: 1
          readOnly: true
          type: string
      readOnly: true
      required:
      - sdk2
      - sdk3-avatars
      - sdk3-worlds
      type: object
    Config_dynamicWorldRows:
      properties:
        index:
          readOnly: true
          type: number
        name:
          minLength: 1
          readOnly: true
          type: string
        platform:
          minLength: 1
          readOnly: true
          type: string
        sortHeading:
          minLength: 1
          readOnly: true
          type: string
        sortOrder:
          minLength: 1
          readOnly: true
          type: string
        sortOwnership:
          minLength: 1
          readOnly: true
          type: string
        tag:
          description: Tag to filter worlds for this row
          minLength: 1
          readOnly: true
          type: string
      readOnly: true
      required:
      - index
      - name
      - platform
      - sortHeading
      - sortOrder
      - sortOwnership
      type: object
    Config_events:
      properties:
        distanceClose:
          description: Unknown
          readOnly: true
          type: number
        distanceFactor:
          description: Unknown
          readOnly: true
          type: number
        distanceFar:
          description: Unknown
          readOnly: true
          type: number
        groupDistance:
          description: Unknown
          readOnly: true
          type: number
        maximumBunchSize:
          description: Unknown
          readOnly: true
          type: number
        notVisibleFactor:
          description: Unknown
          readOnly: true
          type: number
        playerOrderBucketSize:
          description: Unknown
          readOnly: true
          type: number
        playerOrderFactor:
          description: Unknown
          readOnly: true
          type: number
        slowUpdateFactorThreshold:
          description: Unknown
          readOnly: true
          type: number
        viewSegmentLength:
          description: Unknown
          readOnly: true
          type: number
      readOnly: true
      required:
      - distanceClose
      - distanceFactor
      - distanceFar
      - groupDistance
      - maximumBunchSize
      - notVisibleFactor
      - playerOrderBucketSize
      - playerOrderFactor
      - slowUpdateFactorThreshold
      - viewSegmentLength
      type: object
    Instance_platforms:
      example:
        android: 1.4658129805029452
        standalonewindows: 5.962133916683182
      properties:
        android:
          type: number
        standalonewindows:
          type: number
      required:
      - android
      - standalonewindows
      type: object
    Avatar_unityPackageUrlObject:
      deprecated: true
      description: '**Deprecation:** `Object` has unknown usage/fields, and is always
        empty. Use normal `Url` field instead.'
      example:
        unityPackageUrl: unityPackageUrl
      properties:
        unityPackageUrl:
          type: string
      type: object
  securitySchemes:
    apiKeyQuery:
      description: API Key via Query
      in: query
      name: apiKey
      type: apiKey
    apiKeyCookie:
      description: API Key via Cookie
      in: cookie
      name: apiKey
      type: apiKey
    authHeader:
      description: Auth token via Header
      scheme: basic
      type: http
    authCookie:
      description: Auth Token via Cookie
      in: cookie
      name: auth
      type: apiKey
    twoFactorAuthCookie:
      description: 2FA device remembrance via Cookie
      in: cookie
      name: twoFactorAuth
      type: apiKey

