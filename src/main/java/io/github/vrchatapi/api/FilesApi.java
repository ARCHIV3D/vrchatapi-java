/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.InlineObject3;
import io.github.vrchatapi.model.InlineObject4;
import io.github.vrchatapi.model.InlineObject5;
import io.github.vrchatapi.model.InlineResponse2003;
import io.github.vrchatapi.model.InlineResponse2004;
import io.github.vrchatapi.model.Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createFile
     * @param inlineObject3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileCall(InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileValidateBeforeCall(InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createFileCall(inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * Create File
     * Creates a new File object
     * @param inlineObject3  (optional)
     * @return java.io.File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public java.io.File createFile(InlineObject3 inlineObject3) throws ApiException {
        ApiResponse<java.io.File> localVarResp = createFileWithHttpInfo(inlineObject3);
        return localVarResp.getData();
    }

    /**
     * Create File
     * Creates a new File object
     * @param inlineObject3  (optional)
     * @return ApiResponse&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<java.io.File> createFileWithHttpInfo(InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = createFileValidateBeforeCall(inlineObject3, null);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create File (asynchronously)
     * Creates a new File object
     * @param inlineObject3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileAsync(InlineObject3 inlineObject3, final ApiCallback<java.io.File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileValidateBeforeCall(inlineObject3, _callback);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFileVersion
     * @param fileId  (required)
     * @param inlineObject4  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileVersionCall(String fileId, InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject4;

        // create path and map variables
        String localVarPath = "/file/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileVersionValidateBeforeCall(String fileId, InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling createFileVersion(Async)");
        }
        

        okhttp3.Call localVarCall = createFileVersionCall(fileId, inlineObject4, _callback);
        return localVarCall;

    }

    /**
     * Create File Version
     * Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
     * @param fileId  (required)
     * @param inlineObject4  (optional)
     * @return java.io.File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public java.io.File createFileVersion(String fileId, InlineObject4 inlineObject4) throws ApiException {
        ApiResponse<java.io.File> localVarResp = createFileVersionWithHttpInfo(fileId, inlineObject4);
        return localVarResp.getData();
    }

    /**
     * Create File Version
     * Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
     * @param fileId  (required)
     * @param inlineObject4  (optional)
     * @return ApiResponse&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<java.io.File> createFileVersionWithHttpInfo(String fileId, InlineObject4 inlineObject4) throws ApiException {
        okhttp3.Call localVarCall = createFileVersionValidateBeforeCall(fileId, inlineObject4, null);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create File Version (asynchronously)
     * Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
     * @param fileId  (required)
     * @param inlineObject4  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileVersionAsync(String fileId, InlineObject4 inlineObject4, final ApiCallback<java.io.File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileVersionValidateBeforeCall(fileId, inlineObject4, _callback);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFile
     * @param fileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFile(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFileCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * Delete File
     * Deletes a File object.
     * @param fileId  (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteFile(String fileId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Delete File
     * Deletes a File object.
     * @param fileId  (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete File (asynchronously)
     * Deletes a File object.
     * @param fileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a File. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(String fileId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFileVersion
     * @param fileId  (required)
     * @param versionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not hte last one. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileVersionCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileVersionValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteFileVersion(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFileVersionCall(fileId, versionId, _callback);
        return localVarCall;

    }

    /**
     * Delete File Version
     * Delete a specific version of a file. You can only delete the latest version.
     * @param fileId  (required)
     * @param versionId  (required)
     * @return java.io.File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not hte last one. </td><td>  -  </td></tr>
     </table>
     */
    public java.io.File deleteFileVersion(String fileId, Integer versionId) throws ApiException {
        ApiResponse<java.io.File> localVarResp = deleteFileVersionWithHttpInfo(fileId, versionId);
        return localVarResp.getData();
    }

    /**
     * Delete File Version
     * Delete a specific version of a file. You can only delete the latest version.
     * @param fileId  (required)
     * @param versionId  (required)
     * @return ApiResponse&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not hte last one. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<java.io.File> deleteFileVersionWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileVersionValidateBeforeCall(fileId, versionId, null);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete File Version (asynchronously)
     * Delete a specific version of a file. You can only delete the latest version.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not hte last one. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileVersionAsync(String fileId, Integer versionId, final ApiCallback<java.io.File> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileVersionValidateBeforeCall(fileId, versionId, _callback);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadFileVersion
     * @param fileId  (required)
     * @param versionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFileVersionCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadFileVersionValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling downloadFileVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling downloadFileVersion(Async)");
        }
        

        okhttp3.Call localVarCall = downloadFileVersionCall(fileId, versionId, _callback);
        return localVarCall;

    }

    /**
     * Download File Version
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
     * @param fileId  (required)
     * @param versionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
     </table>
     */
    public void downloadFileVersion(String fileId, Integer versionId) throws ApiException {
        downloadFileVersionWithHttpInfo(fileId, versionId);
    }

    /**
     * Download File Version
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
     * @param fileId  (required)
     * @param versionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadFileVersionWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = downloadFileVersionValidateBeforeCall(fileId, versionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download File Version (asynchronously)
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFileVersionAsync(String fileId, Integer versionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadFileVersionValidateBeforeCall(fileId, versionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for finishFileDataUpload
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param inlineObject5  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finishFileDataUploadCall(String fileId, Integer versionId, String fileType, InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject5;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}/{fileType}/finish"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "fileType" + "\\}", localVarApiClient.escapeString(fileType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finishFileDataUploadValidateBeforeCall(String fileId, Integer versionId, String fileType, InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling finishFileDataUpload(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling finishFileDataUpload(Async)");
        }
        
        // verify the required parameter 'fileType' is set
        if (fileType == null) {
            throw new ApiException("Missing the required parameter 'fileType' when calling finishFileDataUpload(Async)");
        }
        

        okhttp3.Call localVarCall = finishFileDataUploadCall(fileId, versionId, fileType, inlineObject5, _callback);
        return localVarCall;

    }

    /**
     * Finish FileData Upload
     * Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param inlineObject5  (optional)
     * @return java.io.File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public java.io.File finishFileDataUpload(String fileId, Integer versionId, String fileType, InlineObject5 inlineObject5) throws ApiException {
        ApiResponse<java.io.File> localVarResp = finishFileDataUploadWithHttpInfo(fileId, versionId, fileType, inlineObject5);
        return localVarResp.getData();
    }

    /**
     * Finish FileData Upload
     * Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param inlineObject5  (optional)
     * @return ApiResponse&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<java.io.File> finishFileDataUploadWithHttpInfo(String fileId, Integer versionId, String fileType, InlineObject5 inlineObject5) throws ApiException {
        okhttp3.Call localVarCall = finishFileDataUploadValidateBeforeCall(fileId, versionId, fileType, inlineObject5, null);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finish FileData Upload (asynchronously)
     * Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param inlineObject5  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finishFileDataUploadAsync(String fileId, Integer versionId, String fileType, InlineObject5 inlineObject5, final ApiCallback<java.io.File> _callback) throws ApiException {

        okhttp3.Call localVarCall = finishFileDataUploadValidateBeforeCall(fileId, versionId, fileType, inlineObject5, _callback);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param fileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }
        

        okhttp3.Call localVarCall = getFileCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * Show File
     * Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
     * @param fileId  (required)
     * @return java.io.File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public java.io.File getFile(String fileId) throws ApiException {
        ApiResponse<java.io.File> localVarResp = getFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Show File
     * Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
     * @param fileId  (required)
     * @return ApiResponse&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<java.io.File> getFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show File (asynchronously)
     * Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
     * @param fileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(String fileId, final ApiCallback<java.io.File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<java.io.File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileDataUploadStatus
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileDataUploadStatusCall(String fileId, Integer versionId, String fileType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}/{fileType}/status"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "fileType" + "\\}", localVarApiClient.escapeString(fileType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileDataUploadStatusValidateBeforeCall(String fileId, Integer versionId, String fileType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileDataUploadStatus(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getFileDataUploadStatus(Async)");
        }
        
        // verify the required parameter 'fileType' is set
        if (fileType == null) {
            throw new ApiException("Missing the required parameter 'fileType' when calling getFileDataUploadStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getFileDataUploadStatusCall(fileId, versionId, fileType, _callback);
        return localVarCall;

    }

    /**
     * Check FileData Upload Status
     * Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 getFileDataUploadStatus(String fileId, Integer versionId, String fileType) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = getFileDataUploadStatusWithHttpInfo(fileId, versionId, fileType);
        return localVarResp.getData();
    }

    /**
     * Check FileData Upload Status
     * Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> getFileDataUploadStatusWithHttpInfo(String fileId, Integer versionId, String fileType) throws ApiException {
        okhttp3.Call localVarCall = getFileDataUploadStatusValidateBeforeCall(fileId, versionId, fileType, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check FileData Upload Status (asynchronously)
     * Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileDataUploadStatusAsync(String fileId, Integer versionId, String fileType, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileDataUploadStatusValidateBeforeCall(fileId, versionId, fileType, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesCall(String tag, String userId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(String tag, String userId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getFilesCall(tag, userId, n, offset, _callback);
        return localVarCall;

    }

    /**
     * List Files
     * Returns a list of files
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return List&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public List<java.io.File> getFiles(String tag, String userId, Integer n, Integer offset) throws ApiException {
        ApiResponse<List<java.io.File>> localVarResp = getFilesWithHttpInfo(tag, userId, n, offset);
        return localVarResp.getData();
    }

    /**
     * List Files
     * Returns a list of files
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;List&lt;java.io.File&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<java.io.File>> getFilesWithHttpInfo(String tag, String userId, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(tag, userId, n, offset, null);
        Type localVarReturnType = new TypeToken<List<java.io.File>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Files (asynchronously)
     * Returns a list of files
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAsync(String tag, String userId, Integer n, Integer offset, final ApiCallback<List<java.io.File>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(tag, userId, n, offset, _callback);
        Type localVarReturnType = new TypeToken<List<java.io.File>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startFileDataUpload
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param partNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startFileDataUploadCall(String fileId, Integer versionId, String fileType, Integer partNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}/{fileType}/start"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "fileType" + "\\}", localVarApiClient.escapeString(fileType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partNumber", partNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startFileDataUploadValidateBeforeCall(String fileId, Integer versionId, String fileType, Integer partNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling startFileDataUpload(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling startFileDataUpload(Async)");
        }
        
        // verify the required parameter 'fileType' is set
        if (fileType == null) {
            throw new ApiException("Missing the required parameter 'fileType' when calling startFileDataUpload(Async)");
        }
        
        // verify the required parameter 'partNumber' is set
        if (partNumber == null) {
            throw new ApiException("Missing the required parameter 'partNumber' when calling startFileDataUpload(Async)");
        }
        

        okhttp3.Call localVarCall = startFileDataUploadCall(fileId, versionId, fileType, partNumber, _callback);
        return localVarCall;

    }

    /**
     * Start FileData Upload
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param partNumber  (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 startFileDataUpload(String fileId, Integer versionId, String fileType, Integer partNumber) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = startFileDataUploadWithHttpInfo(fileId, versionId, fileType, partNumber);
        return localVarResp.getData();
    }

    /**
     * Start FileData Upload
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param partNumber  (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> startFileDataUploadWithHttpInfo(String fileId, Integer versionId, String fileType, Integer partNumber) throws ApiException {
        okhttp3.Call localVarCall = startFileDataUploadValidateBeforeCall(fileId, versionId, fileType, partNumber, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start FileData Upload (asynchronously)
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @param fileId  (required)
     * @param versionId  (required)
     * @param fileType  (required)
     * @param partNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startFileDataUploadAsync(String fileId, Integer versionId, String fileType, Integer partNumber, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = startFileDataUploadValidateBeforeCall(fileId, versionId, fileType, partNumber, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
