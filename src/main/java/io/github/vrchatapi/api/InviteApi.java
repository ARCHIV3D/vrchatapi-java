/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.InviteMessage;
import io.github.vrchatapi.model.InviteRequest;
import io.github.vrchatapi.model.InviteResponse;
import io.github.vrchatapi.model.Notification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InviteApi {
    private ApiClient localVarApiClient;

    public InviteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InviteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getInviteMessage
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single InviteMessage object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInviteMessageCall(String userId, String messageType, Integer messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message/{userId}/{messageType}/{messageId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "messageType" + "\\}", localVarApiClient.escapeString(messageType.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInviteMessageValidateBeforeCall(String userId, String messageType, Integer messageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getInviteMessage(Async)");
        }
        
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling getInviteMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getInviteMessage(Async)");
        }
        

        okhttp3.Call localVarCall = getInviteMessageCall(userId, messageType, messageId, _callback);
        return localVarCall;

    }

    /**
     * Get Invite Messages
     * Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @return InviteMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single InviteMessage object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public InviteMessage getInviteMessage(String userId, String messageType, Integer messageId) throws ApiException {
        ApiResponse<InviteMessage> localVarResp = getInviteMessageWithHttpInfo(userId, messageType, messageId);
        return localVarResp.getData();
    }

    /**
     * Get Invite Messages
     * Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @return ApiResponse&lt;InviteMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single InviteMessage object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InviteMessage> getInviteMessageWithHttpInfo(String userId, String messageType, Integer messageId) throws ApiException {
        okhttp3.Call localVarCall = getInviteMessageValidateBeforeCall(userId, messageType, messageId, null);
        Type localVarReturnType = new TypeToken<InviteMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Invite Messages (asynchronously)
     * Returns a single Invite Message. This returns the exact same information but less than &#x60;getInviteMessages&#x60;. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single InviteMessage object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInviteMessageAsync(String userId, String messageType, Integer messageId, final ApiCallback<InviteMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInviteMessageValidateBeforeCall(userId, messageType, messageId, _callback);
        Type localVarReturnType = new TypeToken<InviteMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInviteMessages
     * @param userId  (required)
     * @param messageType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInviteMessagesCall(String userId, String messageType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message/{userId}/{messageType}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "messageType" + "\\}", localVarApiClient.escapeString(messageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInviteMessagesValidateBeforeCall(String userId, String messageType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getInviteMessages(Async)");
        }
        
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling getInviteMessages(Async)");
        }
        

        okhttp3.Call localVarCall = getInviteMessagesCall(userId, messageType, _callback);
        return localVarCall;

    }

    /**
     * List Invite Messages
     * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @return List&lt;InviteMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public List<InviteMessage> getInviteMessages(String userId, String messageType) throws ApiException {
        ApiResponse<List<InviteMessage>> localVarResp = getInviteMessagesWithHttpInfo(userId, messageType);
        return localVarResp.getData();
    }

    /**
     * List Invite Messages
     * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @return ApiResponse&lt;List&lt;InviteMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InviteMessage>> getInviteMessagesWithHttpInfo(String userId, String messageType) throws ApiException {
        okhttp3.Call localVarCall = getInviteMessagesValidateBeforeCall(userId, messageType, null);
        Type localVarReturnType = new TypeToken<List<InviteMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Invite Messages (asynchronously)
     * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInviteMessagesAsync(String userId, String messageType, final ApiCallback<List<InviteMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInviteMessagesValidateBeforeCall(userId, messageType, _callback);
        Type localVarReturnType = new TypeToken<List<InviteMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteUser
     * @param userId  (required)
     * @param inviteRequest Slot number of the Invite Message to use when inviting a user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserCall(String userId, InviteRequest inviteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inviteRequest;

        // create path and map variables
        String localVarPath = "/invite/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserValidateBeforeCall(String userId, InviteRequest inviteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling inviteUser(Async)");
        }
        

        okhttp3.Call localVarCall = inviteUserCall(userId, inviteRequest, _callback);
        return localVarCall;

    }

    /**
     * Invite User
     * Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
     * @param userId  (required)
     * @param inviteRequest Slot number of the Invite Message to use when inviting a user. (optional)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public Notification inviteUser(String userId, InviteRequest inviteRequest) throws ApiException {
        ApiResponse<Notification> localVarResp = inviteUserWithHttpInfo(userId, inviteRequest);
        return localVarResp.getData();
    }

    /**
     * Invite User
     * Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
     * @param userId  (required)
     * @param inviteRequest Slot number of the Invite Message to use when inviting a user. (optional)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> inviteUserWithHttpInfo(String userId, InviteRequest inviteRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserValidateBeforeCall(userId, inviteRequest, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite User (asynchronously)
     * Sends an invite to a user. Returns the Notification of type &#x60;invite&#x60; that was sent.
     * @param userId  (required)
     * @param inviteRequest Slot number of the Invite Message to use when inviting a user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserAsync(String userId, InviteRequest inviteRequest, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserValidateBeforeCall(userId, inviteRequest, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestInvite
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestInviteCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/requestInvite/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestInviteValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling requestInvite(Async)");
        }
        

        okhttp3.Call localVarCall = requestInviteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Request Invite
     * Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
     * @param userId  (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public Notification requestInvite(String userId) throws ApiException {
        ApiResponse<Notification> localVarResp = requestInviteWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Request Invite
     * Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
     * @param userId  (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> requestInviteWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = requestInviteValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Invite (asynchronously)
     * Requests an invite from a user. Returns the Notification of type &#x60;requestInvite&#x60; that was sent.
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to invite someome whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestInviteAsync(String userId, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestInviteValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetInviteMessage
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetInviteMessageCall(String userId, String messageType, Integer messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message/{userId}/{messageType}/{messageId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "messageType" + "\\}", localVarApiClient.escapeString(messageType.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetInviteMessageValidateBeforeCall(String userId, String messageType, Integer messageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resetInviteMessage(Async)");
        }
        
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling resetInviteMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling resetInviteMessage(Async)");
        }
        

        okhttp3.Call localVarCall = resetInviteMessageCall(userId, messageType, messageId, _callback);
        return localVarCall;

    }

    /**
     * Reset Invite Message
     * Resets a single Invite Message back to it&#39;s original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, but resetting it does not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 Too Fast Error.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @return List&lt;InviteMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public List<InviteMessage> resetInviteMessage(String userId, String messageType, Integer messageId) throws ApiException {
        ApiResponse<List<InviteMessage>> localVarResp = resetInviteMessageWithHttpInfo(userId, messageType, messageId);
        return localVarResp.getData();
    }

    /**
     * Reset Invite Message
     * Resets a single Invite Message back to it&#39;s original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, but resetting it does not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 Too Fast Error.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @return ApiResponse&lt;List&lt;InviteMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InviteMessage>> resetInviteMessageWithHttpInfo(String userId, String messageType, Integer messageId) throws ApiException {
        okhttp3.Call localVarCall = resetInviteMessageValidateBeforeCall(userId, messageType, messageId, null);
        Type localVarReturnType = new TypeToken<List<InviteMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset Invite Message (asynchronously)
     * Resets a single Invite Message back to it&#39;s original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, but resetting it does not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 Too Fast Error.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetInviteMessageAsync(String userId, String messageType, Integer messageId, final ApiCallback<List<InviteMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetInviteMessageValidateBeforeCall(userId, messageType, messageId, _callback);
        Type localVarReturnType = new TypeToken<List<InviteMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respondInvite
     * @param notificationId  (required)
     * @param inviteResponse Instance ID when inviting a user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to respond to an invite and something went wrong. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondInviteCall(String notificationId, InviteResponse inviteResponse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inviteResponse;

        // create path and map variables
        String localVarPath = "/invite/{notificationId}/response"
            .replaceAll("\\{" + "notificationId" + "\\}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respondInviteValidateBeforeCall(String notificationId, InviteResponse inviteResponse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling respondInvite(Async)");
        }
        

        okhttp3.Call localVarCall = respondInviteCall(notificationId, inviteResponse, _callback);
        return localVarCall;

    }

    /**
     * Respond Invite
     * Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
     * @param notificationId  (required)
     * @param inviteResponse Instance ID when inviting a user. (optional)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to respond to an invite and something went wrong. </td><td>  -  </td></tr>
     </table>
     */
    public Notification respondInvite(String notificationId, InviteResponse inviteResponse) throws ApiException {
        ApiResponse<Notification> localVarResp = respondInviteWithHttpInfo(notificationId, inviteResponse);
        return localVarResp.getData();
    }

    /**
     * Respond Invite
     * Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
     * @param notificationId  (required)
     * @param inviteResponse Instance ID when inviting a user. (optional)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to respond to an invite and something went wrong. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> respondInviteWithHttpInfo(String notificationId, InviteResponse inviteResponse) throws ApiException {
        okhttp3.Call localVarCall = respondInviteValidateBeforeCall(notificationId, inviteResponse, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Respond Invite (asynchronously)
     * Respond to an invite request by sending a world invite to the requesting user. &#x60;:notificationId&#x60; is the ID of the requesting notification.
     * @param notificationId  (required)
     * @param inviteResponse Instance ID when inviting a user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Notifcation object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to respond to an invite and something went wrong. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondInviteAsync(String notificationId, InviteResponse inviteResponse, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = respondInviteValidateBeforeCall(notificationId, inviteResponse, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInviteMessage
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInviteMessageCall(String userId, String messageType, Integer messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message/{userId}/{messageType}/{messageId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "messageType" + "\\}", localVarApiClient.escapeString(messageType.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyCookie", "authCookie" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInviteMessageValidateBeforeCall(String userId, String messageType, Integer messageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateInviteMessage(Async)");
        }
        
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling updateInviteMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateInviteMessage(Async)");
        }
        

        okhttp3.Call localVarCall = updateInviteMessageCall(userId, messageType, messageId, _callback);
        return localVarCall;

    }

    /**
     * Update Invite Message
     * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 Too Fast Error.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @return List&lt;InviteMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public List<InviteMessage> updateInviteMessage(String userId, String messageType, Integer messageId) throws ApiException {
        ApiResponse<List<InviteMessage>> localVarResp = updateInviteMessageWithHttpInfo(userId, messageType, messageId);
        return localVarResp.getData();
    }

    /**
     * Update Invite Message
     * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 Too Fast Error.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @return ApiResponse&lt;List&lt;InviteMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InviteMessage>> updateInviteMessageWithHttpInfo(String userId, String messageType, Integer messageId) throws ApiException {
        okhttp3.Call localVarCall = updateInviteMessageValidateBeforeCall(userId, messageType, messageId, null);
        Type localVarReturnType = new TypeToken<List<InviteMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Invite Message (asynchronously)
     * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 Too Fast Error.  Message type refers to a different collection of messages, used during different types of responses.  * &#x60;message&#x60; &#x3D; Message during a normal invite * &#x60;response&#x60; &#x3D; Message when replying to a message * &#x60;request&#x60; &#x3D; Message when requesting an invite * &#x60;requestResponse&#x60; &#x3D; Message when replying to a request for invite
     * @param userId  (required)
     * @param messageType  (required)
     * @param messageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InviteMessage objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to update an Invite Message with invalid slot number. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing authorization to perform that action. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response when trying to update an Invite Message before the cooldown has expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInviteMessageAsync(String userId, String messageType, Integer messageId, final ApiCallback<List<InviteMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInviteMessageValidateBeforeCall(userId, messageType, messageId, _callback);
        Type localVarReturnType = new TypeToken<List<InviteMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
