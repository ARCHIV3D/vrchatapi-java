/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.7.7
 * Contact: me@ariesclark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InfoPushDataClickable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InfoPushDataClickable {
  /**
   * Gets or Sets command
   */
  @JsonAdapter(CommandEnum.Adapter.class)
  public enum CommandEnum {
    OPENURL("OpenURL"),
    
    OPENVRCPLUSMENU("OpenVRCPlusMenu"),
    
    OPENSAFETYMENU("OpenSafetyMenu"),
    
    CANNEDWORLDSEARCH("CannedWorldSearch");

    private String value;

    CommandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommandEnum fromValue(String value) {
      for (CommandEnum b : CommandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommandEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private CommandEnum command;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<String> parameters = null;


  public InfoPushDataClickable command(CommandEnum command) {
    
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "OpenURL", required = true, value = "")

  public CommandEnum getCommand() {
    return command;
  }


  public void setCommand(CommandEnum command) {
    this.command = command;
  }


  public InfoPushDataClickable parameters(List<String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public InfoPushDataClickable addParametersItem(String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<String>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * In case of OpenURL, this would contain the link.
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "In case of OpenURL, this would contain the link.")

  public List<String> getParameters() {
    return parameters;
  }


  public void setParameters(List<String> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoPushDataClickable infoPushDataClickable = (InfoPushDataClickable) o;
    return Objects.equals(this.command, infoPushDataClickable.command) &&
        Objects.equals(this.parameters, infoPushDataClickable.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoPushDataClickable {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

